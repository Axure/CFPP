/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        BooleanTest.m
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    Test class for CF::Boolean
 */

@interface BooleanTest: XCTestCase
{}

@end

@implementation BooleanTest

- ( void )setUp
{
    [ super setUp ];
}

- ( void )tearDown
{
    [ super tearDown ];
}

- ( void )testConstructor
{
    {
        CF::Boolean b;
        
        XCTAssertTrue( b.IsValid(), "CF::Boolean().isValid()" );
    }
    
    {
        CF::Boolean b( true );
        
        XCTAssertTrue( b.IsValid(), "CF::Boolean( true ).isValid()" );
    }
    
    {
        CF::Boolean b( false );
        
        XCTAssertTrue( b.IsValid(), "CF::Boolean( false ).isValid()" );
    }
    
    {
        CF::Boolean b( kCFBooleanTrue );
        
        XCTAssertTrue( b.IsValid(), "CF::Boolean( kCFBooleanTrue ).isValid()" );
    }
    
    {
        CF::Boolean b( kCFBooleanFalse );
        
        XCTAssertTrue( b.IsValid(), "CF::Boolean( kCFBooleanFalse ).isValid()" );
    }
    
    {
        CF::Boolean b( static_cast< CFBooleanRef >( NULL ) );
        
        XCTAssertTrue( b.IsValid(), "CF::Boolean( NULL ).isValid()" );
    }
    
    {
        CF::Boolean b1( static_cast< CFBooleanRef >( NULL ), true );
        CF::Boolean b2( static_cast< CFBooleanRef >( NULL ), false );
        
        XCTAssertTrue( b1.IsValid(), "CF::Boolean( NULL, true ).isValid()" );
        XCTAssertTrue( b2.IsValid(), "CF::Boolean( NULL, false ).isValid()" );
    }
    
    {
        CF::Boolean b1;
        CF::Boolean b2( b1 );
        
        XCTAssertTrue( b2.IsValid(), "CF::Boolean( const CF::Boolean & ).isValid()" );
    }
}

- ( void )testOperatorAssign
{
    CF::Boolean b1;
    
    {
        b1 = CF::Boolean();
        
        XCTAssertTrue( b1.IsValid(), "CF::Boolean::operator = ( CF::Boolean() ).isValid()" );
    }
    
    {
        CF::Boolean b2;
        
        b1 = true;
        
        XCTAssertTrue( b1.IsValid(), "CF::Boolean::operator = ( true ).isValid()" );
    }
    
    {
        CF::Boolean b2;
        
        b1 = false;
        
        XCTAssertTrue( b1.IsValid(), "CF::Boolean::operator = ( false ).isValid()" );
    }
    
    {
        CF::Boolean b2;
        
        b1 = kCFBooleanTrue;
        
        XCTAssertTrue( b1.IsValid(), "CF::Boolean::operator = ( kCFBooleanTrue ).isValid()" );
    }
    
    {
        CF::Boolean b2;
        
        b1 = kCFBooleanFalse;
        
        XCTAssertTrue( b1.IsValid(), "CF::Boolean::operator = ( kCFBooleanFalse ).isValid()" );
    }
    
    {
        CF::Boolean b2;
        
        b1 = static_cast< CFBooleanRef >( NULL );
        
        XCTAssertTrue( b1.IsValid(), "CF::Boolean::operator = ( NULL ).isValid()" );
    }
}

- ( void )testOperatorEqual
{
    CF::Boolean b1( true );
    CF::Boolean b2( false );
    
    XCTAssertTrue( b1 == b1, "CF::Boolean( true ) == CF::Boolean( false )" );
    XCTAssertFalse( b1 == b2, "CF::Boolean( true ) != CF::Boolean( false )" );
    
    XCTAssertTrue(  b1 == true,  "CF::Boolean( true ) == CF::Boolean( false )" );
    XCTAssertFalse( b1 == false, "CF::Boolean( true ) == false" );
    
    XCTAssertTrue(  b1 == kCFBooleanTrue, "CF::Boolean( true ) == kCFBooleanTrue" );
    XCTAssertFalse( b1 == kCFBooleanFalse, "CF::Boolean( true ) == kCFBooleanFalse" );
    XCTAssertFalse( b1 == static_cast< CFBooleanRef >( NULL ), "CF::Boolean( true ) == NULL" );
    
    XCTAssertFalse( b2 == static_cast< CFTypeRef >( CFSTR( "" ) ), "CF::Boolean( false ) == CFSTR( \"\" )" );
    XCTAssertFalse( b2 == static_cast< CFTypeRef >( CFSTR( "" ) ), "CF::Boolean( false ) == CFSTR( \"\" )" );
}

- ( void )testOperatorNotEqual
{
    CF::Boolean b1( true );
    CF::Boolean b2( false );
    
    XCTAssertFalse( b1 != b1, "CF::Boolean( true ) != CF::Boolean( false )" );
    XCTAssertTrue(  b1 != b2, "CF::Boolean( true ) != CF::Boolean( false )" );
    
    XCTAssertFalse( b1 != true,  "CF::Boolean( true ) != CF::Boolean( false )" );
    XCTAssertTrue(  b1 != false, "CF::Boolean( true ) != false" );
    
    XCTAssertFalse( b1 != kCFBooleanTrue,                      "CF::Boolean( true ) != kCFBooleanTrue" );
    XCTAssertTrue(  b1 != kCFBooleanFalse,                     "CF::Boolean( true ) != kCFBooleanFalse" );
    XCTAssertTrue(  b1 != static_cast< CFBooleanRef >( NULL ), "CF::Boolean( true ) != NULL" );
    
    XCTAssertTrue( CF::Boolean() != static_cast< CFTypeRef >( CFSTR( "" ) ), "CF::Boolean() != CFSTR( \"\" )" );
}

- ( void )testOperatorCastToBool
{
    CF::Boolean b1( true );
    CF::Boolean b2( false );
    bool        bool1;
    bool        bool2;
    
    bool1 = b1;
    bool2 = b2;
    
    XCTAssertTrue(  b1, "CF::Boolean( true ) == true" );
    XCTAssertFalse( b2, "CF::Boolean( false ) == true" );
    
    b1 = kCFBooleanTrue;
    b2 = kCFBooleanFalse;
    
    XCTAssertTrue(  b1, "CF::Boolean( true ) == true" );
    XCTAssertFalse( b2, "CF::Boolean( false ) == true" );
    
    b1 = CF::Boolean( true );
    b2 = CF::Boolean( false );
    
    XCTAssertTrue(  b1, "CF::Boolean( true ) == true" );
    XCTAssertFalse( b2, "CF::Boolean( false ) == true" );
    
    b2 = CF::Boolean( static_cast< CFBooleanRef >( NULL ) );
    
    XCTAssertFalse( b2, "CF::Boolean( false ) == true" );
}

- ( void )testMethodGetTypeID
{
    CF::Boolean b;
    
    XCTAssertTrue( b.GetTypeID() == CFBooleanGetTypeID(), "CF::Boolean().GetTypeID() == CFBooleanGetTypeID()" );
}

- ( void )testMethodGetCFObject
{
    CF::Boolean b;
    
    XCTAssertTrue( b.GetCFObject() != NULL, "CF::Boolean().GetCFObject() != NULL" );
    
    b = CF::Boolean( true );
    
    XCTAssertTrue( b.GetCFObject() == kCFBooleanTrue, "CF::Boolean( true ).GetCFObject() == kCFBooleanTrue" );
    
    b = CF::Boolean( false );
    
    XCTAssertTrue( b.GetCFObject() == kCFBooleanFalse, "CF::Boolean( false ).GetCFObject() == kCFBooleanFalse" );
}

- ( void )testMethodGetValue
{
    CF::Boolean b;
    
    b = CF::Boolean( false );
    
    XCTAssertTrue( b.GetValue() == false, "CF::Boolean( false ).GetValue() == false" );
    
    b = CF::Boolean( true );
    
    XCTAssertTrue( b.GetValue() == true, "CF::Boolean( true ).GetValue() == true" );
    
    b = kCFBooleanFalse;
    
    XCTAssertTrue( b.GetValue() == false, "CF::Boolean( kCFBooleanFalse ).GetValue() == false" );
    
    b = kCFBooleanTrue;
    
    XCTAssertTrue( b.GetValue() == true, "CF::Boolean( kCFBooleanTrue ).GetValue() == true" );
    
    b = static_cast< CFBooleanRef >( NULL );
    
    XCTAssertTrue( b.GetValue() == false, "CF::Boolean( NULL ).GetValue() == false" );
    
    b = CF::Boolean( CF::Boolean( true ) );
    
    XCTAssertTrue( b.GetValue() == true, "CF::Boolean( CF::Boolean( true ) ).GetValue() == true" );
}

- ( void )testMethodSetValue
{
    CF::Boolean b;
    
    b.SetValue( true );
    
    XCTAssertTrue( b.GetValue() == true, "CF::Boolean().SetValue( true ).GetValue() == true" );
    
    b.SetValue( false );
    
    XCTAssertTrue( b.GetValue() == false, "CF::Boolean().SetValue( false ).GetValue() == false" );
}

@end
