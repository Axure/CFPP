/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        CFPP-Type.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    Unit tests for CF::Type
 */

#include <CF++.h>
#include <GoogleMock/GoogleMock.h>

using namespace testing;

TEST( CFPP_Type, OperatorEqual )
{
    int         x;
    long        y;
    CFNumberRef cfN1;
    CFNumberRef cfN2;
    CF::Number  n1;
    CF::Number  n2;
    
    x    = 0;
    y    = 0;
    cfN1 = CFNumberCreate( NULL, kCFNumberIntType,  &x );
    cfN2 = CFNumberCreate( NULL, kCFNumberLongType, &y );
    n1   = cfN1;
    n2   = cfN2;
    
    CFRelease( n1 );
    CFRelease( n2 );
    
    {
        const CF::Type & t1 = n1;
        const CF::Type & t2 = n2;
        
        ASSERT_EQ( t1, t2 );
    }
}

TEST( CFPP_Type, OperatorNotEqual )
{
    int         x;
    long        y;
    CFNumberRef cfN1;
    CFNumberRef cfN2;
    CF::Number  n1;
    CF::Number  n2;
    
    x    = 0;
    y    = 1;
    cfN1 = CFNumberCreate( NULL, kCFNumberIntType,  &x );
    cfN2 = CFNumberCreate( NULL, kCFNumberLongType, &y );
    n1   = cfN1;
    n2   = cfN2;
    
    CFRelease( n1 );
    CFRelease( n2 );
    
    {
        const CF::Type & t1 = n1;
        const CF::Type & t2 = n2;
        
        ASSERT_NE( t1, t2 );
    }
}

TEST( CFPP_Type, CastToCFTypeRef )
{
    CF::Number n;
    
    {
        const CF::Type & t = n;
        
        ASSERT_TRUE( static_cast< CFTypeRef >( t ) != NULL );
    }
}

TEST( CFPP_Type, CastToCFBooleanRef )
{
    CF::Boolean b;
    CF::Number  n;
    
    {
        const CF::Type & t1 = b;
        const CF::Type & t2 = n;
        
        ASSERT_TRUE( static_cast< CFBooleanRef >( t1 ) != NULL );
        ASSERT_TRUE( static_cast< CFBooleanRef >( t2 ) == NULL );
    }
}

TEST( CFPP_Type, CastToCFNumberRef )
{
    CF::Number  n;
    CF::Boolean b;
    
    {
        const CF::Type & t1 = n;
        const CF::Type & t2 = b;
        
        ASSERT_TRUE( static_cast< CFNumberRef >( t1 ) != NULL );
        ASSERT_TRUE( static_cast< CFNumberRef >( t2 ) == NULL );
    }
}

TEST( CFPP_Type, CastToCFDateRef )
{
    CF::Date    d;
    CF::Boolean b;
    
    {
        const CF::Type & t1 = d;
        const CF::Type & t2 = b;
        
        ASSERT_TRUE( static_cast< CFDateRef >( t1 ) != NULL );
        ASSERT_TRUE( static_cast< CFDateRef >( t2 ) == NULL );
    }
}

TEST( CFPP_Type, CastToCFStringRef )
{
    CF::String  s;
    CF::Boolean b;
    
    {
        const CF::Type & t1 = s;
        const CF::Type & t2 = b;
        
        ASSERT_TRUE( static_cast< CFStringRef >( t1 ) != NULL );
        ASSERT_TRUE( static_cast< CFStringRef >( t2 ) == NULL );
    }
}

TEST( CFPP_Type, CastToCFMutableStringRef )
{
    CF::String  s;
    CF::Boolean b;
    
    {
        const CF::Type & t1 = s;
        const CF::Type & t2 = b;
        
        ASSERT_TRUE( static_cast< CFMutableStringRef >( t1 ) != NULL );
        ASSERT_TRUE( static_cast< CFMutableStringRef >( t2 ) == NULL );
    }
}
