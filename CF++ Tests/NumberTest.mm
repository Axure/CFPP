/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        NumberTest.m
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    Test class for CF::Number
 */

#define DBL_EQUALS( _x_, _y_ )  ( fabs(  ( _x_ ) - ( _y_ ) ) < DBL_EPSILON )
#define FLT_EQUALS( _x_, _y_ )  ( fabsf( ( _x_ ) - ( _y_ ) ) < FLT_EPSILON )

@interface NumberTest: XCTestCase
{}

@end

@implementation NumberTest

- ( void )setUp
{
    [ super setUp ];
}

- ( void )tearDown
{
    [ super tearDown ];
}

- ( void )testConstructor
{
    {
        CF::Number n;
        
        XCTAssertTrue( n.IsValid(), "CF::Number().isValid()" );
    }
    
    {
        CF::Number n1;
        CF::Number n2( n1 );
        
        XCTAssertTrue( n2.IsValid(), "CF::Number( const CF::Number & ).isValid()" );
    }
    
    {
        CF::Number n1( static_cast< CF::Number::SInt8  >( 42 ) );
        CF::Number n2( static_cast< CF::Number::SInt16 >( 42 ) );
        CF::Number n3( static_cast< CF::Number::SInt32 >( 42 ) );
        CF::Number n4( static_cast< CF::Number::SInt64 >( 42 ) );
        
        XCTAssertTrue( n1.IsValid(), "CF::Number( SInt8 ).isValid()" );
        XCTAssertTrue( n2.IsValid(), "CF::Number( SInt16 ).isValid()" );
        XCTAssertTrue( n3.IsValid(), "CF::Number( SInt32 ).isValid()" );
        XCTAssertTrue( n4.IsValid(), "CF::Number( SInt64 ).isValid()" );
    }
    
    {
        CF::Number n1( static_cast< CF::Number::UInt8  >( 42 ) );
        CF::Number n2( static_cast< CF::Number::UInt16 >( 42 ) );
        CF::Number n3( static_cast< CF::Number::UInt32 >( 42 ) );
        CF::Number n4( static_cast< CF::Number::UInt64 >( 42 ) );
        
        XCTAssertTrue( n1.IsValid(), "CF::Number( UInt8 ).isValid()" );
        XCTAssertTrue( n2.IsValid(), "CF::Number( UInt16 ).isValid()" );
        XCTAssertTrue( n3.IsValid(), "CF::Number( UInt32 ).isValid()" );
        XCTAssertTrue( n4.IsValid(), "CF::Number( UInt64 ).isValid()" );
    }
    
    {
        CF::Number n1( static_cast< CF::Number::Float32  >( 42.0f ) );
        CF::Number n2( static_cast< CF::Number::Float64 >( 42.0f ) );
        
        XCTAssertTrue( n1.IsValid(), "CF::Number( Float32 ).isValid()" );
        XCTAssertTrue( n2.IsValid(), "CF::Number( Float64 ).isValid()" );
    }
    
    {
        int         i  = 42;
        CFNumberRef cf = CFNumberCreate( static_cast< CFAllocatorRef >( NULL ), kCFNumberSInt32Type, &i );
        CF::Number  n( cf );
        
        XCTAssertTrue( n.IsValid(), "CF::Number( CFNumberRef ).isValid()" );
        CFRelease( cf );
    }
    
    {
        CF::Number n1( CFSTR( "" ) );
        CF::Number n2( static_cast< CFNumberRef >( NULL ) );
        
        XCTAssertFalse( n1.IsValid(), "CF::Number( CFStringRef ).isValid()" );
        XCTAssertFalse( n2.IsValid(), "CF::Number( NULL ).isValid()" );
    }
    
    {
        CF::Number n1( static_cast< CFNumberRef >( NULL ), static_cast< CF::Number::SInt8  >( 42 ) );
        CF::Number n2( static_cast< CFNumberRef >( NULL ), static_cast< CF::Number::SInt16 >( 42 ) );
        CF::Number n3( static_cast< CFNumberRef >( NULL ), static_cast< CF::Number::SInt32 >( 42 ) );
        CF::Number n4( static_cast< CFNumberRef >( NULL ), static_cast< CF::Number::SInt64 >( 42 ) );
        
        XCTAssertTrue( n1.IsValid(), "CF::Number( NULL, SInt8 ).isValid()" );
        XCTAssertTrue( n2.IsValid(), "CF::Number( NULL, SInt16 ).isValid()" );
        XCTAssertTrue( n3.IsValid(), "CF::Number( NULL, SInt32 ).isValid()" );
        XCTAssertTrue( n4.IsValid(), "CF::Number( NULL, SInt64 ).isValid()" );
    }
    
    {
        CF::Number n1( static_cast< CFNumberRef >( NULL ), static_cast< CF::Number::UInt8  >( 42 ) );
        CF::Number n2( static_cast< CFNumberRef >( NULL ), static_cast< CF::Number::UInt16 >( 42 ) );
        CF::Number n3( static_cast< CFNumberRef >( NULL ), static_cast< CF::Number::UInt32 >( 42 ) );
        CF::Number n4( static_cast< CFNumberRef >( NULL ), static_cast< CF::Number::UInt64 >( 42 ) );
        
        XCTAssertTrue( n1.IsValid(), "CF::Number( NULL, UInt8 ).isValid()" );
        XCTAssertTrue( n2.IsValid(), "CF::Number( NULL, UInt16 ).isValid()" );
        XCTAssertTrue( n3.IsValid(), "CF::Number( NULL, UInt32 ).isValid()" );
        XCTAssertTrue( n4.IsValid(), "CF::Number( NULL, UInt64 ).isValid()" );
    }
    
    {
        CF::Number n1( static_cast< CFNumberRef >( NULL ), static_cast< CF::Number::Float32  >( 42.0f ) );
        CF::Number n2( static_cast< CFNumberRef >( NULL ), static_cast< CF::Number::Float64 >( 42.0f ) );
        
        XCTAssertTrue( n1.IsValid(), "CF::Number( NULL, Float32 ).isValid()" );
        XCTAssertTrue( n2.IsValid(), "CF::Number( NULL, Float64 ).isValid()" );
    }
}

- ( void )testOperatorAssign
{
    CF::Number  n;
    int         i;
    CFNumberRef cf;
    
    i  = 42;
    cf = CFNumberCreate( static_cast< CFAllocatorRef >( NULL ), kCFNumberSInt32Type, &i );
    
    n = static_cast< CF::Number::SInt8 >( 42 );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( SInt8 ).isValid()" );
    
    n = static_cast< CF::Number::SInt16 >( 42 );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( SInt16 ).isValid()" );
    
    n = static_cast< CF::Number::SInt32 >( 42 );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( SInt32 ).isValid()" );
    
    n = static_cast< CF::Number::SInt64 >( 42 );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( SInt64 ).isValid()" );
    
    n = static_cast< CF::Number::UInt8 >( 42 );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( UInt8 ).isValid()" );
    
    n = static_cast< CF::Number::UInt16 >( 42 );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( UInt16 ).isValid()" );
    
    n = static_cast< CF::Number::UInt32 >( 42 );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( UInt32 ).isValid()" );
    
    n = static_cast< CF::Number::UInt64 >( 42 );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( UInt64 ).isValid()" );
    
    n = static_cast< CF::Number::Float32 >( 42.0f );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( Float32 ).isValid()" );
    
    n = static_cast< CF::Number::Float64 >( 42.0f );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( Float64 ).isValid()" );
    
    n = CF::Number( 42 );
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( CF::Number ).isValid()" );
    
    n = cf;
    
    XCTAssertTrue( n.IsValid(), "CF::Number::operator = ( CFNumberRef ).isValid()" );
    
    n = static_cast< CFNumberRef >( NULL );
    
    XCTAssertFalse( n.IsValid(), "CF::Number::operator = ( NULL ).isValid()" );
    
    n = CFSTR( "" );
    
    XCTAssertFalse( n.IsValid(), "CF::Number::operator = ( CFStringRef ).isValid()" );
}

- ( void )testOperatorEqual
{
    CF::Number n1;
    CF::Number n2;
    
    n1 = 42;
    n2 = 42;
    
    XCTAssertTrue( n1 == n2, "CF::Number( 42 ) == CF::Number( 42 )" );
    
    n2 = 0;
    
    XCTAssertFalse( n1 == n2, "CF::Number( 42 ) == CF::Number( 0 )" );
    
    n2 = 42.0f;
    
    XCTAssertTrue( n1 == n2, "CF::Number( 42 ) == CF::Number( 42.0f )" );
}

- ( void )testOperatorNotEqual
{}

- ( void )testOperatorGreaterOrEqual
{}

- ( void )testOperatorLessOrEqual
{}

- ( void )testOperatorGreater
{}

- ( void )testOperatorLess
{}

- ( void )testOperatorLogicalAnd
{}

- ( void )testOperatorLogicalOr
{}

- ( void )testOperatorBitwiseNot
{}

- ( void )testOperatorLogicalNot
{}

- ( void )testOperatorIncrement
{}

- ( void )testOperatorDecrement
{}

- ( void )testOperatorAddAssign
{}

- ( void )testOperatorSubstractAssign
{}

- ( void )testOperatorMultiplyAssign
{}

- ( void )testOperatorDivideAssign
{}

- ( void )testOperatorBitwiseOrAssign
{}

- ( void )testOperatorBitwiseAndAssign
{}

- ( void )testOperatorModuloAssign
{}

- ( void )testOperatorBitwiseXorAssign
{}

- ( void )testOperatorShiftLeftAssign
{}

- ( void )testOperatorShiftRightAssign
{}

- ( void )testOperatorAdd
{}

- ( void )testOperatorSubstract
{}

- ( void )testOperatorMultiply
{}

- ( void )testOperatorDivide
{}

- ( void )testOperatorModulo
{}

- ( void )testOperatorBitwiseAnd
{}

- ( void )testOperatorBitwiseOr
{}

- ( void )testOperatorBitwiseXor
{}

- ( void )testOperatorShiftLeft
{}

- ( void )testOperatorShiftRight
{}

- ( void )testOperatorCastSignedInteger
{}

- ( void )testOperatorCastUnsignedInteger
{}

- ( void )testOperatorCastFloatingPoint
{}

- ( void )testMethodGetTypeID
{}

- ( void )testMethodGetCFObject
{}

- ( void )testMethodIsFloatType
{
    CF::Number  n;
    CFNumberRef cf;
    int         i;
    double      d;
    
    i = 42;
    d = 42.0f;
    
    n = i;
    
    XCTAssertTrue( n.IsFloatType() == false, "CF::Number( 42 ).IsFloatType() == false" );
    
    n = d;
    
    XCTAssertTrue( n.IsFloatType() == true, "CF::Number( 42.0f ).IsFloatType() == true" );
    
    cf = CFNumberCreate( static_cast< CFAllocatorRef >( NULL ), kCFNumberIntType, &i );
    n  = cf;
    
    XCTAssertTrue( n.IsFloatType() == false, "CF::Number( CFNumberRef( 42 ) ).IsFloatType() == false" );
    CFRelease( cf );
    
    cf = CFNumberCreate( static_cast< CFAllocatorRef >( NULL ), kCFNumberFloat64Type, &d );
    n  = cf;
    
    XCTAssertTrue( n.IsFloatType() == true, "CF::Number( CFNumberRef( 42.0f ) ).IsFloatType() == true" );
    CFRelease( cf );
}

- ( void )testMethodGetSignedIntegerValue
{
    CF::Number n;
    
    n = static_cast< CF::Number::SInt8 >( INT8_MAX - 42 );
    
    XCTAssertTrue( n.GetSInt8Value() == INT8_MAX - 42, "CF::Number( SInt8 = INT8_MAX - 42 ).GetSInt8Value() == INT8_MAX - 42" );
    
    n = static_cast< CF::Number::SInt16 >( INT16_MAX - 42 );
    
    XCTAssertTrue( n.GetSInt16Value() == INT16_MAX - 42, "CF::Number( SInt16 = INT16_MAX - 42 ).GetSInt16Value() == INT16_MAX - 42" );
    
    n = static_cast< CF::Number::SInt32 >( INT32_MAX - 42 );
    
    XCTAssertTrue( n.GetSInt32Value() == INT32_MAX - 42, "CF::Number( SInt32 = INT32_MAX - 42 ).GetSInt32Value() == INT32_MAX - 42" );
    
    n = static_cast< CF::Number::SInt64 >( INT64_MAX - 42 );
    
    XCTAssertTrue( n.GetSInt64Value() == INT64_MAX - 42, "CF::Number( SInt64 = INT64_MAX - 42 ).GetSInt64Value() == INT64_MAX - 42" );
}

- ( void )testMethodGetUnsignedIntegerValue
{
    CF::Number n;
    
    n = static_cast< CF::Number::UInt8 >( INT8_MAX );
    
    XCTAssertTrue( n.GetUInt8Value() == INT8_MAX, "CF::Number( UInt8 = INT8_MAX ).GetUInt8Value() == INT8_MAX" );
    
    n = static_cast< CF::Number::UInt16 >( INT16_MAX );
    
    XCTAssertTrue( n.GetUInt16Value() == INT16_MAX, "CF::Number( UInt16 = INT16_MAX ).GetUInt16Value() == INT16_MAX" );
    
    n = static_cast< CF::Number::UInt32 >( INT32_MAX );
    
    XCTAssertTrue( n.GetUInt32Value() == INT32_MAX, "CF::Number( UInt32 = INT32_MAX ).GetUInt32Value() == INT32_MAX" );
    
    n = static_cast< CF::Number::UInt64 >( INT64_MAX );
    
    XCTAssertTrue( n.GetUInt64Value() == INT64_MAX, "CF::Number( UInt64 = INT64_MAX ).GetUInt64Value() == INT64_MAX" );
}

- ( void )testMethodGetFloatingPointValue
{
    CF::Number n;
    
    n = static_cast< CF::Number::Float32 >( 42.0f );
    
    XCTAssertTrue( FLT_EQUALS( n.GetFloat32Value(), 42.0f ), "CF::Number( Float32 = 42.0 ).GetFloat32Value() == 42.0" );
    
    n = static_cast< CF::Number::Float64 >( 42.0f );
    
    XCTAssertTrue( DBL_EQUALS( n.GetFloat64Value(), 42.0f ), "CF::Number( Float64 = 42.0 ).GetFloat32Value() == 42.0" );
}

- ( void )testMethodSetSignedIntegerValue
{}

- ( void )testMethodSetUnsignedIntegerValue
{}

- ( void )testMethodSetFloatingPointValue
{}

@end
