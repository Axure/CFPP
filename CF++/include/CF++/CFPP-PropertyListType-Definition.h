/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @header      CFPP-PropertyListType-Definition.h
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    CoreFoundation++ base class for property list compatible types
 */

#ifndef __CFPP_PROPERTY_LIST_TYPE_DEFINITION_H__
#define __CFPP_PROPERTY_LIST_TYPE_DEFINITION_H__

#include <CF++/CFPP-PropertyListType.h>
#include <CF++/CFPP-Data.h>
#include <CF++/CFPP-URL.h>

namespace CF
{
    template < class T >
    T PropertyListType< T >::FromPropertyList( std::string path )
    {
        CFTypeRef        cfObject;
        T                object;
        FILE           * fh;
        CF::Data         data;
        CF::Data::Byte * buf;
        size_t           length;
        
        fh  = fopen( path.c_str(), "rb" );
        buf = ( CF::Data::Byte * )malloc( 4096 );
        
        if( buf == NULL || fh == NULL )
        {
            goto end;
        }
        
        while( !feof( fh ) )
        {
            length = fread( buf, 1, 4096, fh );
            
            data.AppendBytes( buf, ( CFIndex )length );
        }
        
        cfObject = CFPropertyListCreateWithData( ( CFAllocatorRef )NULL, data, 0, NULL, NULL );
        
        if( cfObject != NULL )
        {
            object = cfObject;
            
            CFRelease( cfObject );
        }
        
        end:
        
        free( buf );
        fclose( fh );
        
        return object;
    }
    
    template < class T >
    bool PropertyListType< T >::ToPropertyList( std::string path, PropertyListFormat format )
    {
        CF::URL          url;
        CF::Data         d;
        CFWriteStreamRef cfStream;
        
        if( this->IsValid() == false )
        {
            return false;
        }
        
        url = CF::URL::FileSystemURL( path );
        d   = this->ToPropertyList( format );
        
        if( d.GetLength() == 0 )
        {
            return false;
        }
        
        cfStream = CFWriteStreamCreateWithFile( ( CFAllocatorRef )NULL, url );
        
        if( cfStream == NULL )
        {
            return false;
        }
        
        CFWriteStreamOpen( cfStream );
        CFWriteStreamWrite( cfStream, d.GetBytePtr(), d.GetLength() );
        CFWriteStreamClose( cfStream );
        
        CFRelease( cfStream );
        
        return true;
    }
    
    template < class T >
    Data PropertyListType< T >::ToPropertyList( PropertyListFormat format )
    {
        CFDataRef            cfData;
        CFErrorRef           cfError;
        CFPropertyListFormat cfFormat;
        Data                 d;
        
        if( this->IsValid() == false )
        {
            return d;
        }
        
        cfError  = NULL;
        cfFormat = kCFPropertyListXMLFormat_v1_0;
        
        if( format == PropertyListFormatBinary )
        {
            cfFormat = kCFPropertyListBinaryFormat_v1_0;
        }
        
        cfData = CFPropertyListCreateData( ( CFAllocatorRef )NULL, this->GetCFObject(), cfFormat, 0, &cfError );
        
        if( cfError != NULL )
        {
            if( cfData != NULL )
            {
                CFRelease( cfData );
            }
            
            return d;
        }
        
        if( cfData != NULL )
        {
            d = cfData;
            
            CFRelease( cfData );
        }
        
        return d;
    }
}

#endif /* __CFPP_PROPERTY_LIST_TYPE_DEFINITION_H__ */
