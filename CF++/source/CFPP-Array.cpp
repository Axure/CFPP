/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        CFPP-Array.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    CoreFoundation++ CFArrayRef wrapper
 */

#include <CF++.h>

namespace CF
{
    Array::Array( CFIndex capacity )
    {
        this->_cfObject = CFArrayCreateMutable
        (
            ( CFAllocatorRef )NULL,
            capacity,
            &kCFTypeArrayCallBacks
        );
    }
    
    Array::Array( const Array & value )
    {
        if( value._cfObject != NULL )
        {
            this->_cfObject = CFArrayCreateMutableCopy
            (
                ( CFAllocatorRef )NULL,
                CFArrayGetCount( value._cfObject ),
                value._cfObject
            );
        }
        else
        {
            this->_cfObject = CFArrayCreateMutable
            (
                ( CFAllocatorRef )NULL,
                100,
                &kCFTypeArrayCallBacks
            );
        }
    }
    
    Array::Array( CFTypeRef value )
    {
        if( value != NULL && CFGetTypeID( value ) == this->GetTypeID() )
        {
            this->_cfObject = CFArrayCreateMutableCopy
            (
                ( CFAllocatorRef )NULL,
                CFArrayGetCount( ( CFArrayRef )value ),
                ( CFArrayRef )value
            );
        }
        else
        {
            this->_cfObject = CFArrayCreateMutable
            (
                ( CFAllocatorRef )NULL,
                100,
                &kCFTypeArrayCallBacks
            );
        }
    }
    
    Array::Array( CFArrayRef value )
    {
        if( value != NULL && CFGetTypeID( value ) == this->GetTypeID() )
        {
            this->_cfObject = CFArrayCreateMutableCopy
            (
                ( CFAllocatorRef )NULL,
                CFArrayGetCount( value ),
                value
            );
        }
        else
        {
            this->_cfObject = CFArrayCreateMutable
            (
                ( CFAllocatorRef )NULL,
                100,
                &kCFTypeArrayCallBacks
            );
        }
    }
    
    Array::~Array( void )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
            
            this->_cfObject = NULL;
        }
    }
    
    Array & Array::operator = ( const Array & value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        if( value._cfObject != NULL )
        {
            this->_cfObject = CFArrayCreateMutableCopy
            (
                ( CFAllocatorRef )NULL,
                CFArrayGetCount( value._cfObject ),
                value._cfObject
            );
        }
        else
        {
            this->_cfObject = CFArrayCreateMutable
            (
                ( CFAllocatorRef )NULL,
                100,
                &kCFTypeArrayCallBacks
            );
        }
        
        return *( this );
    }
    
    Array & Array::operator = ( CFTypeRef value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        if( value != NULL && CFGetTypeID( value ) == this->GetTypeID() )
        {
            this->_cfObject = CFArrayCreateMutableCopy
            (
                ( CFAllocatorRef )NULL,
                CFArrayGetCount( ( CFArrayRef )value ),
                ( CFArrayRef )value
            );
        }
        else
        {
            this->_cfObject = CFArrayCreateMutable
            (
                ( CFAllocatorRef )NULL,
                100,
                &kCFTypeArrayCallBacks
            );
        }
        
        return *( this );
    }
    
    Array & Array::operator = ( CFArrayRef value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        if( value != NULL && CFGetTypeID( value ) == this->GetTypeID() )
        {
            this->_cfObject = CFArrayCreateMutableCopy
            (
                ( CFAllocatorRef )NULL,
                CFArrayGetCount( value ),
                value
            );
        }
        else
        {
            this->_cfObject = CFArrayCreateMutable
            (
                ( CFAllocatorRef )NULL,
                100,
                &kCFTypeArrayCallBacks
            );
        }
        
        return *( this );
    }
    
    Array & Array::operator += ( const Array & value )
    {
        this->AppendArray( value._cfObject );
        
        return *( this );
    }
    
    Array & Array::operator += ( CFTypeRef value )
    {
        this->AppendArray( ( CFArrayRef )value );
        
        return *( this );
    }
    
    Array & Array::operator += ( CFArrayRef value )
    {
        this->AppendArray( value );
        
        return *( this );
    }
    
    Array & Array::operator << ( CFTypeRef value )
    {
        this->AppendValue( value );
        
        return *( this );
    }
    
    Array & Array::operator << ( const char * value )
    {
        String s;
        
        s = value;
        
        this->AppendValue( s );
        
        return *( this );
    }
    
    Array & Array::operator << ( String value )
    {
        this->AppendValue( value );
        
        return *( this );
    }
    
    Array & Array::operator << ( Number value )
    {
        this->AppendValue( value );
        
        return *( this );
    }
            
    CFTypeRef Array::operator [] ( int index )
    {
        return this->GetValueAtIndex( ( CFIndex )index );
    }
    
    CFTypeID Array::GetTypeID( void ) const
    {
        return CFArrayGetTypeID();
    }
    
    CFTypeRef Array::GetCFObject( void ) const
    {
        return this->_cfObject;
    }
    
    CFIndex Array::GetCount( void )
    {
        return ( this->_cfObject == NULL ) ? 0 : CFArrayGetCount( this->_cfObject );
    }
    
    bool Array::ContainsValue( CFTypeRef value )
    {
        if( this->_cfObject == NULL || value == NULL )
        {
            return false;
        }
        
        return CFArrayContainsValue
        (
            this->_cfObject,
            CFRangeMake( 0, this->GetCount() ),
            value
        );
    }
    
    void Array::RemoveAllValues( void )
    {
        if( this->_cfObject != NULL )
        {
            CFArrayRemoveAllValues( this->_cfObject );
        }
    }
    
    CFTypeRef Array::GetValueAtIndex( CFIndex index )
    {
        if( this->_cfObject == NULL || index >= this->GetCount() )
        {
            return NULL;
        }
        
        return CFArrayGetValueAtIndex( this->_cfObject, index );
    }
    
    void Array::SetValueAtIndex( CFTypeRef value, CFIndex index )
    {
        if( this->_cfObject == NULL || index >= this->GetCount() || value == NULL )
        {
            return;
        }
        
        CFArraySetValueAtIndex( this->_cfObject, index, value );
    }
    
    void Array::InsertValueAtIndex( CFTypeRef value, CFIndex index )
    {
        if( this->_cfObject == NULL || index >= this->GetCount() || value == NULL )
        {
            return;
        }
        
        CFArrayInsertValueAtIndex( this->_cfObject, index, value );
    }
    
    void Array::AppendValue( CFTypeRef value )
    {
        if( this->_cfObject == NULL || value == NULL )
        {
            return;
        }
        
        CFArrayAppendValue( this->_cfObject, value );
    }
    
    void Array::RemoveValueAtIndex( CFIndex index )
    {
        if( this->_cfObject == NULL || index >= this->GetCount() )
        {
            return;
        }
        
        CFArrayRemoveValueAtIndex( this->_cfObject, index );
    }
    
    void Array::AppendArray( CFArrayRef array )
    {
        if( array == NULL || CFGetTypeID( array ) != this->GetTypeID() )
        {
            return;
        }
        
        if( this->_cfObject == NULL )
        {
            this->_cfObject = CFArrayCreateMutableCopy
            (
                ( CFAllocatorRef )NULL,
                100,
                array
            );
        }
        else
        {
            CFArrayAppendArray
            (
                this->_cfObject,
                array,
                CFRangeMake( 0, CFArrayGetCount( array ) )
            );
        }
    }
    
    void Array::ExchangeValuesAtIndices( CFIndex index1, CFIndex index2 )
    {
        if( this->_cfObject == NULL || index1 >= this->GetCount() || index2 >= this->GetCount() )
        {
            return;
        }
        
        CFArrayExchangeValuesAtIndices( this->_cfObject, index1, index2 );
    }
}
