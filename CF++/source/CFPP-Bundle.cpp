/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        CFPP-Bundle.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    CoreFoundation++ CFBundleRef wrapper
 */

#include <CF++.hpp>

namespace CF
{
    Array Bundle::GetAllBundles( void )
    {
        return static_cast< CFArrayRef >( NULL );
    }
    
    Array Bundle::GetBundlesFromDirectory( URL directoryURL, Array bundleTypes )
    {
        ( void )directoryURL;
        ( void )bundleTypes;
        
        return static_cast< CFArrayRef >( NULL );
    }
    
    Bundle Bundle::GetBundleWithIdentifier( String identifier )
    {
        ( void )identifier;
        
        return static_cast< CFBundleRef >( NULL );
    }
    
    Bundle Bundle::GetMainBundle( void )
    {
        return static_cast< CFBundleRef >( NULL );
    }
    
    
    URL Bundle::GetResourceURLInDirectory( URL bundleURL, String resourceName, String resourceType, String subDirName )
    {
        ( void )bundleURL;
        ( void )resourceName;
        ( void )resourceType;
        ( void )subDirName;
        
        return static_cast< CFURLRef >( NULL );
    }
    
    Array Bundle::GetResourceURLsOfTypeInDirectory( URL bundleURL, String resourceType, String subDirName )
    {
        ( void )bundleURL;
        ( void )resourceType;
        ( void )subDirName;
        
        return static_cast< CFArrayRef >( NULL );
    }
    
    Dictionary Bundle::GetInfoDictionaryInDirectory( URL bundleURL )
    {
        ( void )bundleURL;
        
        return static_cast< CFDictionaryRef >( NULL );
    }
    
    Dictionary Bundle::GetInfoDictionaryForURL( URL url )
    {
        ( void )url;
        
        return static_cast< CFDictionaryRef >( NULL );
    }
    
    bool Bundle::GetPackageInfoInDirectory( URL url, UInt32 * packageType, UInt32 * packageCreator )
    {
        ( void )url;
        ( void )packageType;
        ( void )packageCreator;
        
        return false;
    }
    
    Array Bundle::GetExecutableArchitecturesForURL( URL url )
    {
        ( void )url;
        
        return static_cast< CFArrayRef >( NULL );
    }
    
    Array Bundle::GetLocalizationsForPreferences( Array locArray, Array prefArray )
    {
        ( void )locArray;
        ( void )prefArray;
        
        return static_cast< CFArrayRef >( NULL );
    }
    
    Array Bundle::GetLocalizationsForURL( URL url )
    {
        ( void )url;
        
        return static_cast< CFArrayRef >( NULL );
    }
    
    Array Bundle::GetPreferredLocalizationsFromArray( Array locArray )
    {
        ( void )locArray;
        
        return static_cast< CFArrayRef >( NULL );
    }
    
    Bundle::Bundle( void )
    {}
    
    Bundle::Bundle( const Bundle & value )
    {
        ( void )value;
    }
    
    Bundle::Bundle( const AutoPointer & value )
    {
        ( void )value;
    }
    
    Bundle::Bundle( CFTypeRef cfObject )
    {
        ( void )cfObject;
    }
    
    Bundle::Bundle( CFBundleRef cfObject )
    {
        ( void )cfObject;
    }
    
    Bundle::Bundle( String identifier )
    {
        ( void )identifier;
    }
    
    Bundle::Bundle( URL url )
    {
        ( void )url;
    }
    
    #ifdef CFPP_HAS_CPP11
    Bundle::Bundle( Bundle && value )
    {
        ( void )value;
    }
    
    #endif

    Bundle::~Bundle( void )
    {}
    
    Bundle & Bundle::operator = ( Bundle value )
    {
        ( void )value;
        
        return *( this );
    }
    
    Bundle & Bundle::operator = ( const AutoPointer & value )
    {
        ( void )value;
        
        return *( this );
    }
    
    Bundle & Bundle::operator = ( CFTypeRef value )
    {
        ( void )value;
        
        return *( this );
    }
    
    Bundle & Bundle::operator = ( CFBundleRef value )
    {
        ( void )value;
        
        return *( this );
    }
    
    Bundle & Bundle::operator = ( String identifier )
    {
        ( void )identifier;
        
        return *( this );
    }
    
    Bundle & Bundle::operator = ( URL url )
    {
        ( void )url;
        
        return *( this );
    }
    
    CFTypeID Bundle::GetTypeID( void ) const
    {
        return 0;
    }
    
    CFTypeRef Bundle::GetCFObject( void ) const
    {
        return static_cast< CFTypeRef >( NULL );
    }
    
    bool Bundle::IsExecutableLoaded( void )
    {
        return false;
    }
    
    bool Bundle::PreflightExecutable( Error * error )
    {
        ( void )error;
        
        return false;
    }
    
    bool Bundle::LoadExecutable( Error * error )
    {
        ( void )error;
        
        return false;
    }
    
    void Bundle::UnloadExecutable( void )
    {}
    
    URL Bundle::GetAuxiliaryExecutableURL( String executableName )
    {
        ( void )executableName;
        
        return static_cast< CFURLRef >( NULL );
    }
    
    URL Bundle::GetBuiltInPlugInsURL( void )
    {
        return static_cast< CFURLRef >( NULL );
    }
    
    URL Bundle::GetExecutableURL( void )
    {
        return static_cast< CFURLRef >( NULL );
    }
    
    URL Bundle::GetPrivateFrameworksURL( void )
    {
        return static_cast< CFURLRef >( NULL );
    }
    
    URL Bundle::GetResourcesDirectoryURL( void )
    {
        return static_cast< CFURLRef >( NULL );
    }
    
    URL Bundle::GetSharedFrameworksURL( void )
    {
        return static_cast< CFURLRef >( NULL );
    }
    
    URL Bundle::GetSharedSupportURL( void )
    {
        return static_cast< CFURLRef >( NULL );
    }
    
    URL Bundle::GetSupportFilesDirectoryURL( void )
    {
        return static_cast< CFURLRef >( NULL );
    }
    
    void Bundle::CloseBundleResourceMap( CFBundleRefNum refNum )
    {
        ( void )refNum;
    }
    
    URL Bundle::GetResourceURL( String resourceName, String resourceType, String subDirName )
    {
        ( void )resourceName;
        ( void )resourceType;
        ( void )subDirName;
        
        return static_cast< CFURLRef >( NULL );
    }
    
    Array Bundle::GetResourceURLsOfType( String resourceType, String subDirName )
    {
        ( void )resourceType;
        ( void )subDirName;
        
        return static_cast< CFArrayRef >( NULL );
    }
    
    URL Bundle::GetResourceURLForLocalization( String resourceName, String resourceType, String subDirName, String localizationName )
    {
        ( void )resourceName;
        ( void )resourceType;
        ( void )subDirName;
        ( void )localizationName;
        
        return static_cast< CFURLRef >( NULL );
    }
    
    Array Bundle::GetResourceURLsOfTypeForLocalization( String resourceType, String subDirName, String localizationName )
    {
        ( void )resourceType;
        ( void )subDirName;
        ( void )localizationName;
        
        return NULL;
    }
    
    SInt32 Bundle::OpenBundleResourceFiles( CFBundleRefNum * refNum, CFBundleRefNum * localizedRefNum )
    {
        ( void )refNum;
        ( void )localizedRefNum;
        
        return 0;
    }
    
    CFBundleRefNum Bundle::OpenBundleResourceMap( void )
    {
        return 0;
    }
    
    Array Bundle::GetBundleLocalizations( void )
    {
        return static_cast< CFArrayRef >( NULL );
    }
    
    String Bundle::GetLocalizedString( String key, String value, String tableName )
    {
        ( void )key;
        ( void )value;
        ( void )tableName;
        
        return static_cast< CFStringRef >( NULL );
    }
    
    void * Bundle::GetDataPointerForName( String symbolName )
    {
        ( void )symbolName;
        
        return NULL;
    }
    
    void Bundle::GetDataPointersForNames( Array symbolNames, void * stbl[] )
    {
        ( void )symbolNames;
        ( void )stbl;
    }
    
    void * Bundle::GetFunctionPointerForName( String functionName )
    {
        ( void )functionName;
        
        return NULL;
    }
    
    void Bundle::GetFunctionPointersForNames( Array functionNames, void * ftbl[] )
    {
        ( void )functionNames;
        ( void )ftbl;
    }
    
    CFPlugInRef Bundle::GetPlugIn( void )
    {
        return NULL;
    }
    
    URL Bundle::GetBundleURL( void )
    {
        return static_cast< CFURLRef >( NULL );
    }
    
    String Bundle::GetDevelopmentRegion( void )
    {
        return static_cast< CFStringRef >( NULL );
    }
    
    String Bundle::GetIdentifier( void )
    {
        return static_cast< CFStringRef >( NULL );
    }
    
    Dictionary Bundle::GetInfoDictionary( void )
    {
        return static_cast< CFDictionaryRef >( NULL );
    }
    
    Dictionary Bundle::GetLocalInfoDictionary( void )
    {
        return static_cast< CFDictionaryRef >( NULL );
    }
    
    CFTypeRef Bundle::GetValueForInfoDictionaryKey( String key )
    {
        ( void )key;
        
        return NULL;
    }
    
    void Bundle::GetPackageInfo( UInt32 * packageType, UInt32 * packageCreator )
    {
        ( void )packageType;
        ( void )packageCreator;
    }
    
    Array Bundle::GetExecutableArchitectures( void )
    {
        return static_cast< CFArrayRef >( NULL );
    }
    
    UInt32 Bundle::GetVersionNumber( void )
    {
        return 0;
    }
    
    void swap( Bundle & v1, Bundle & v2 )
    {
        ( void )v1;
        ( void )v2;
    }
}
