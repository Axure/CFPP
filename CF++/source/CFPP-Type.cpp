/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        CFPP-Type.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    CoreFoundation++ base abstract class for CF wrappers
 */

#include <CF++.h>

namespace CF
{
    Type::~Type( void )
    {}
    
    bool Type::operator == ( const Type & value ) const
    {
        if( this->GetCFObject() == NULL )
        {
            return false;
        }
        
        if( value.GetCFObject() == NULL )
        {
            return false;
        }
        
        return ( CFEqual( this->GetCFObject(), value.GetCFObject() ) ) ? true : false;
    }
    
    bool Type::operator != ( const Type & value ) const
    {
        return !( *( this ) == value );
    }
            
    Type::operator CFTypeRef ()
    {
        return this->GetCFObject();
    }
    
    Type::operator CFBooleanRef ()
    {
        return ( this->IsBoolean() ) ? ( CFBooleanRef )( this->GetCFObject() ) : NULL;
    }
    
    Type::operator CFNumberRef ()
    {
        return ( this->IsNumber() ) ? ( CFNumberRef )( this->GetCFObject() ) : NULL;
    }
    
    Type::operator CFDateRef ()
    {
        return ( this->IsDate() ) ? ( CFDateRef )( this->GetCFObject() ) : NULL;
    }
    
    Type::operator CFStringRef ()
    {
        return ( this->IsString() ) ? ( CFStringRef )( this->GetCFObject() ) : NULL;
    }
    
    Type::operator CFURLRef ()
    {
        return ( this->IsURL() ) ? ( CFURLRef )( this->GetCFObject() ) : NULL;
    }
    
    Type::operator CFDataRef ()
    {
        return ( this->IsData() ) ? ( CFDataRef )( this->GetCFObject() ) : NULL;
    }
    
    Type::operator CFArrayRef ()
    {
        return ( this->IsArray() ) ? ( CFArrayRef )( this->GetCFObject() ) : NULL;
    }
    
    Type::operator CFDictionaryRef ()
    {
        return ( this->IsDictionary() ) ? ( CFDictionaryRef )( this->GetCFObject() ) : NULL;
    }
    
    std::string Type::Description( void ) const
    {
        CFStringRef  cfDescription;
        std::string  description;
        char       * cStr;
        size_t       length;
        
        if( this->GetCFObject() == NULL )
        {
            return "(null)";
        }
        
        cfDescription = CFCopyDescription( this->GetCFObject() );
        
        if( cfDescription == NULL )
        {
            return "(null)";
        }
        
        length = ( size_t )CFStringGetMaximumSizeForEncoding( CFStringGetLength( cfDescription ), CFStringGetSystemEncoding() );
        
        cStr = ( char * )calloc( length + 1, 1 );
        
        if( cStr == NULL )
        {
            CFRelease( cfDescription );
            
            return "(null)";
        }
        
        CFStringGetCString( cfDescription, cStr, ( CFIndex )( length + 1 ), CFStringGetSystemEncoding() );
        
        description = std::string( cStr );
        
        free( cStr );
        CFRelease( cfDescription );
        
        return description;
    }
    
    CFHashCode Type::Hash( void ) const
    {
        if( this->GetCFObject() == NULL )
        {
            return ( CFHashCode )0;
        }
        
        return CFHash( this->GetCFObject() );
    }
    
    CFIndex Type::GetRetainCount( void ) const
    {
        if( this->GetCFObject() == NULL )
        {
            return 0;
        }
        
        return CFGetRetainCount( this->GetCFObject() );
    }
    
    bool Type::IsValid( void ) const
    {
        return ( this->GetCFObject() != NULL ) ? true : false;
    }
    
    bool Type::IsBoolean( void ) const
    {
        return this->GetTypeID() == CFBooleanGetTypeID();
    }
    
    bool Type::IsNumber( void ) const
    {
        return this->GetTypeID() == CFNumberGetTypeID();
    }
    
    bool Type::IsDate( void ) const
    {
        return this->GetTypeID() == CFDateGetTypeID();
    }
    
    bool Type::IsString( void ) const
    {
        return this->GetTypeID() == CFStringGetTypeID();
    }
    
    bool Type::IsURL( void ) const
    {
        return this->GetTypeID() == CFURLGetTypeID();
    }
    
    bool Type::IsData( void ) const
    {
        return this->GetTypeID() == CFDataGetTypeID();
    }
    
    bool Type::IsArray( void ) const
    {
        return this->GetTypeID() == CFArrayGetTypeID();
    }
    
    bool Type::IsDictionary( void ) const
    {
        return this->GetTypeID() == CFDictionaryGetTypeID();
    }
    
    void Type::Show( void ) const
    {
        std::string className;
        
        className = "CF::Type";
        
        if( this->IsBoolean() )
        {
            className = "CF::Boolean";
        }
        else if( this->IsNumber() )
        {
            className = "CF::Number";
        }
        else if( this->IsDate() )
        {
            className = "CF::Date";
        }
        else if( this->IsString() )
        {
            className = "CF::String";
        }
        else if( this->IsURL() )
        {
            className = "CF::URL";
        }
        else if( this->IsURL() )
        {
            className = "CF::Data";
        }
        else if( this->IsArray() )
        {
            className = "CF::Array";
        }
        else if( this->IsDictionary() )
        {
            className = "CF::Dictionary";
        }
        
        std::cout << className << " - " << this->Description() << std::endl;
    }
    
    std::ostream & operator << ( std::ostream & os, const Type & obj )
    {
        os << obj.Description();
        
        return os;
    }
}
