/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        CFPP-Number.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    CoreFoundation++ CFNumberRef wrapper
 */

#include <CF++.h>

namespace CF
{
    Number::Number( void )
    {
        this->_cfObject = NULL;
        
        this->SetSInt32Value( 0 );
    }
    
    Number::Number( CFTypeRef cfObject )
    {
        if( cfObject != NULL && CFGetTypeID( cfObject ) == this->GetTypeID() )
        {
            this->_cfObject = ( CFNumberRef )CFRetain( cfObject );
        }
        else
        {
            this->_cfObject = NULL;
        }
    }
    
    Number::Number( CFNumberRef cfObject )
    {
        if( cfObject != NULL && CFGetTypeID( cfObject ) == this->GetTypeID() )
        {
            this->_cfObject = ( CFNumberRef )CFRetain( cfObject );
        }
        else
        {
            this->_cfObject = NULL;
        }
    }
    
    Number::Number( const Number & value )
    {
        if( value._cfObject != NULL )
        {
            this->_cfObject = ( CFNumberRef )CFRetain( value._cfObject );
        }
        else
        {
            this->_cfObject = NULL;
        }
    }
    
    Number::Number( Number::SInt8 value )
    {
        this->_cfObject = NULL;
        
        this->SetSInt8Value( value );
    }
    
    Number::Number( Number::SInt16 value )
    {
        this->_cfObject = NULL;
        
        this->SetSInt16Value( value );
    }
    
    Number::Number( Number::SInt32 value )
    {
        this->_cfObject = NULL;
        
        this->SetSInt32Value( value );
    }
    
    Number::Number( Number::SInt64 value )
    {
        this->_cfObject = NULL;
        
        this->SetSInt64Value( value );
    }
    
    Number::Number( Float32 value )
    {
        this->_cfObject = NULL;
        
        this->SetFloat32Value( value );
    }
    
    Number::Number( Float64 value )
    {
        this->_cfObject = NULL;
        
        this->SetFloat64Value( value );
    }
    
    Number::~Number( void )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
            
            this->_cfObject = NULL;
        }
    }
    
    Number & Number::operator = ( const Number & value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        if( value._cfObject != NULL )
        {
            this->_cfObject = ( CFNumberRef )CFRetain( value._cfObject );
        }
        else
        {
            this->_cfObject = NULL;
        }
        
        return *( this );
    }
    
    Number & Number::operator = ( CFTypeRef value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        if( value != NULL && CFGetTypeID( value ) == this->GetTypeID() )
        {
            this->_cfObject = ( CFNumberRef )CFRetain( value );
        }
        else
        {
            this->_cfObject = NULL;
        }
        
        return *( this );
    }
    
    Number & Number::operator = ( CFNumberRef value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        if( value != NULL && CFGetTypeID( value ) == this->GetTypeID() )
        {
            this->_cfObject = ( CFNumberRef )CFRetain( value );
        }
        else
        {
            this->_cfObject = NULL;
        }
        
        return *( this );
    }
    
    Number & Number::operator = ( Number::SInt8 value )
    {
        this->SetSInt8Value( value );
        
        return *( this );
    }
    
    Number & Number::operator = ( Number::SInt16 value )
    {
        this->SetSInt16Value( value );
        
        return *( this );
    }
    
    Number & Number::operator = ( Number::SInt32 value )
    {
        this->SetSInt32Value( value );
        
        return *( this );
    }
    
    Number & Number::operator = ( Number::SInt64 value )
    {
        this->SetSInt64Value( value );
        
        return *( this );
    }
    
    Number & Number::operator = ( Float32 value )
    {
        this->SetFloat32Value( value );
        
        return *( this );
    }
    
    Number & Number::operator = ( Float64 value )
    {
        this->SetFloat64Value( value );
        
        return *( this );
    }
    
    bool Number::operator == ( const Number & value ) const
    {
        if( this->IsFloatType() || value.IsFloatType() )
        {
            return this->GetFloat64Value() == value.GetFloat64Value();
        }
        
        return this->GetSInt64Value() == value.GetSInt64Value();
    }
    
    bool Number::operator == ( CFTypeRef value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) == num;
    }
    
    bool Number::operator == ( CFNumberRef value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) == num;
    }
    
    bool Number::operator == ( Number::SInt8 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) == num;
    }
    
    bool Number::operator == ( Number::SInt16 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) == num;
    }
    
    bool Number::operator == ( Number::SInt32 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) == num;
    }
    
    bool Number::operator == ( Number::SInt64 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) == num;
    }
    
    bool Number::operator == ( Float32 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) == num;
    }
    
    bool Number::operator == ( Float64 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) == num;
    }
            
    bool Number::operator != ( const Number & value ) const
    {
        return !( *( this ) == value );
    }
    
    bool Number::operator != ( CFTypeRef value ) const
    {
        return !( *( this ) == value );
    }
    
    bool Number::operator != ( CFNumberRef value ) const
    {
        return !( *( this ) == value );
    }
    
    bool Number::operator != ( Number::SInt8 value ) const
    {
        return !( *( this ) == value );
    }
    
    bool Number::operator != ( Number::SInt16 value ) const
    {
        return !( *( this ) == value );
    }
    
    bool Number::operator != ( Number::SInt32 value ) const
    {
        return !( *( this ) == value );
    }
    
    bool Number::operator != ( Number::SInt64 value ) const
    {
        return !( *( this ) == value );
    }
    
    bool Number::operator != ( Float32 value ) const
    {
        return !( *( this ) == value );
    }
    
    bool Number::operator != ( Float64 value ) const
    {
        return !( *( this ) == value );
    }
            
    bool Number::operator >= ( const Number & value ) const
    {
        if( this->IsFloatType() || value.IsFloatType() )
        {
            return this->GetFloat64Value() >= value.GetFloat64Value();
        }
        
        return this->GetSInt64Value() >= value.GetSInt64Value();
    }
    
    bool Number::operator >= ( CFNumberRef value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) >= num;
    }
    
    bool Number::operator >= ( Number::SInt8 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) >= num;
    }
    
    bool Number::operator >= ( Number::SInt16 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) >= num;
    }
    
    bool Number::operator >= ( Number::SInt32 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) >= num;
    }
    
    bool Number::operator >= ( Number::SInt64 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) >= num;
    }
    
    bool Number::operator >= ( Float32 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) >= num;
    }
    
    bool Number::operator >= ( Float64 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) >= num;
    }
    
    bool Number::operator <= ( const Number & value ) const
    {
        if( this->IsFloatType() || value.IsFloatType() )
        {
            return this->GetFloat64Value() <= value.GetFloat64Value();
        }
        
        return this->GetSInt64Value() <= value.GetSInt64Value();
    }
    
    bool Number::operator <= ( CFNumberRef value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) <= num;
    }
    
    bool Number::operator <= ( Number::SInt8 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) <= num;
    }
    
    bool Number::operator <= ( Number::SInt16 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) <= num;
    }
    
    bool Number::operator <= ( Number::SInt32 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) <= num;
    }
    
    bool Number::operator <= ( Number::SInt64 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) <= num;
    }
    
    bool Number::operator <= ( Float32 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) <= num;
    }
    
    bool Number::operator <= ( Float64 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) <= num;
    }
            
    bool Number::operator > ( const Number & value ) const
    {
        if( this->IsFloatType() || value.IsFloatType() )
        {
            return this->GetFloat64Value() > value.GetFloat64Value();
        }
        
        return this->GetSInt64Value() > value.GetSInt64Value();
    }
    
    bool Number::operator > ( CFNumberRef value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) > num;
    }
    
    bool Number::operator > ( Number::SInt8 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) > num;
    }
    
    bool Number::operator > ( Number::SInt16 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) > num;
    }
    
    bool Number::operator > ( Number::SInt32 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) > num;
    }
    
    bool Number::operator > ( Number::SInt64 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) > num;
    }
    
    bool Number::operator > ( Float32 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) > num;
    }
    
    bool Number::operator > ( Float64 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) > num;
    }
    
    bool Number::operator < ( const Number & value ) const
    {
        if( this->IsFloatType() || value.IsFloatType() )
        {
            return this->GetFloat64Value() < value.GetFloat64Value();
        }
        
        return this->GetSInt64Value() < value.GetSInt64Value();
    }
    
    bool Number::operator < ( CFNumberRef value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) < num;
    }
    
    bool Number::operator < ( Number::SInt8 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) < num;
    }
    
    bool Number::operator < ( Number::SInt16 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) < num;
    }
    
    bool Number::operator < ( Number::SInt32 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) < num;
    }
    
    bool Number::operator < ( Number::SInt64 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) < num;
    }
    
    bool Number::operator < ( Float32 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) < num;
    }
    
    bool Number::operator < ( Float64 value ) const
    {
        Number num;
        
        num = value;
        
        return *( this ) < num;
    }
    
    bool Number::operator && ( const Number & value )
    {
        return this->GetSInt64Value() && value.GetSInt64Value();
    }
    
    bool Number::operator && ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) && num;
    }
    
    bool Number::operator && ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) && num;
    }
    
    bool Number::operator && ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) && num;
    }
    
    bool Number::operator && ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) && num;
    }
    
    bool Number::operator && ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) && num;
    }
    
    bool Number::operator && ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) && num;
    }
    
    bool Number::operator && ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) && num;
    }
    
    bool Number::operator || ( const Number & value )
    {
        return this->GetSInt64Value() || value.GetSInt64Value();
    }
    
    bool Number::operator || ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) || num;
    }
    
    bool Number::operator || ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) || num;
    }
    
    bool Number::operator || ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) || num;
    }
    
    bool Number::operator || ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) || num;
    }
    
    bool Number::operator || ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) || num;
    }
    
    bool Number::operator || ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) || num;
    }
    
    bool Number::operator || ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) || num;
    }
    
    Number & Number::operator ~ ( void )
    {
        this->SetSInt64Value( ~( this->GetSInt64Value() ) );
        
        return *( this );
    }
    
    Number & Number::operator ! ( void )
    {
        this->SetSInt64Value( !( this->GetSInt64Value() ) );
        
        return *( this );
    }
    
    Number & Number::operator ++ ( void )
    {
        if( this->IsFloatType() )
        {
            this->SetFloat64Value( this->GetFloat64Value() + ( Float64 )1 );
        }
        else
        {
            this->SetSInt64Value( this->GetSInt64Value() + ( Number::SInt64 )1 );
        }
        
        return *( this );
    }
    
    Number Number::operator ++ ( int )
    {
        Number n;
        
        n = *( this );
        
        operator++();
        
        return n;
    }
    
    Number & Number::operator -- ( void )
    {
        if( this->IsFloatType() )
        {
            this->SetFloat64Value( this->GetFloat64Value() - ( Float64 )1 );
        }
        else
        {
            this->SetSInt64Value( this->GetSInt64Value() - ( Number::SInt64 )1 );
        }
        
        return *( this );
    }
    
    Number Number::operator -- ( int )
    {
        Number n;
        
        n = *( this );
        
        operator--();
        
        return n;
    }
    
    Number & Number::operator += ( const Number & value )
    {
        if( this->_cfObject == NULL && value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( this->IsFloatType() )
        {
            this->SetFloat64Value( this->GetFloat64Value() + value.GetFloat64Value() );
        }
        else
        {
            this->SetSInt64Value( this->GetSInt64Value() + value.GetSInt64Value() );
        }
        
        return *( this );
    }
    
    Number & Number::operator += ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) += num;
    }
    
    Number & Number::operator += ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) += num;
    }
    
    Number & Number::operator += ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) += num;
    }
    
    Number & Number::operator += ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) += num;
    }
    
    Number & Number::operator += ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) += num;
    }
    
    Number & Number::operator += ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) += num;
    }
    
    Number & Number::operator += ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) += num;
    }
    
    Number & Number::operator -= ( const Number & value )
    {
        if( this->_cfObject == NULL && value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( this->IsFloatType() )
        {
            this->SetFloat64Value( this->GetFloat64Value() - value.GetFloat64Value() );
        }
        else
        {
            this->SetSInt64Value( this->GetSInt64Value() - value.GetSInt64Value() );
        }
        
        return *( this );
    }
    
    Number & Number::operator -= ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) -= num;
    }
    
    Number & Number::operator -= ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) -= num;
    }
    
    Number & Number::operator -= ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) -= num;
    }
    
    Number & Number::operator -= ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) -= num;
    }
    
    Number & Number::operator -= ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) -= num;
    }
    
    Number & Number::operator -= ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) -= num;
    }
    
    Number & Number::operator -= ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) -= num;
    }
    
    Number & Number::operator *= ( const Number & value )
    {
        if( this->_cfObject == NULL && value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( this->IsFloatType() )
        {
            this->SetFloat64Value( this->GetFloat64Value() * value.GetFloat64Value() );
        }
        else
        {
            this->SetSInt64Value( this->GetSInt64Value() * value.GetSInt64Value() );
        }
        
        return *( this );
    }
    
    Number & Number::operator *= ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) *= num;
    }
    
    Number & Number::operator *= ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) *= num;
    }
    
    Number & Number::operator *= ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) *= num;
    }
    
    Number & Number::operator *= ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) *= num;
    }
    
    Number & Number::operator *= ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) *= num;
    }
    
    Number & Number::operator *= ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) *= num;
    }
    
    Number & Number::operator *= ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) *= num;
    }
    
    Number & Number::operator /= ( const Number & value )
    {
        if( this->_cfObject == NULL && value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( this->IsFloatType() )
        {
            this->SetFloat64Value( this->GetFloat64Value() / value.GetFloat64Value() );
        }
        else
        {
            this->SetSInt64Value( this->GetSInt64Value() / value.GetSInt64Value() );
        }
        
        return *( this );
    }
    
    Number & Number::operator /= ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) /= num;
    }
    
    Number & Number::operator /= ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) /= num;
    }
    
    Number & Number::operator /= ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) /= num;
    }
    
    Number & Number::operator /= ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) /= num;
    }
    
    Number & Number::operator /= ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) /= num;
    }
    
    Number & Number::operator /= ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) /= num;
    }
    
    Number & Number::operator /= ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) /= num;
    }
    
    Number & Number::operator |= ( const Number & value )
    {
        if( this->_cfObject == NULL && value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( value._cfObject == NULL )
        {
            return *( this );
        }
        
        this->SetSInt64Value( this->GetSInt64Value() | value.GetSInt64Value() );
        
        return *( this );
    }
    
    Number & Number::operator |= ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) |= num;
    }
    
    Number & Number::operator |= ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) |= num;
    }
    
    Number & Number::operator |= ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) |= num;
    }
    
    Number & Number::operator |= ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) |= num;
    }
    
    Number & Number::operator |= ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) |= num;
    }
    
    Number & Number::operator |= ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) |= num;
    }
    
    Number & Number::operator |= ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) |= num;
    }
    
    Number & Number::operator &= ( const Number & value )
    {
        if( this->_cfObject == NULL && value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( value._cfObject == NULL )
        {
            return *( this );
        }
        
        this->SetSInt64Value( this->GetSInt64Value() & value.GetSInt64Value() );
        
        return *( this );
    }
    
    Number & Number::operator &= ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) &= num;
    }
    
    Number & Number::operator &= ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) &= num;
    }
    
    Number & Number::operator &= ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) &= num;
    }
    
    Number & Number::operator &= ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) &= num;
    }
    
    Number & Number::operator &= ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) &= num;
    }
    
    Number & Number::operator &= ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) &= num;
    }
    
    Number & Number::operator &= ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) &= num;
    }
    
    Number & Number::operator %= ( const Number & value )
    {
        if( this->_cfObject == NULL && value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( value._cfObject == NULL )
        {
            return *( this );
        }
        
        this->SetSInt64Value( this->GetSInt64Value() % value.GetSInt64Value() );
        
        return *( this );
    }
    
    Number & Number::operator %= ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) %= num;
    }
    
    Number & Number::operator %= ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) %= num;
    }
    
    Number & Number::operator %= ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) %= num;
    }
    
    Number & Number::operator %= ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) %= num;
    }
    
    Number & Number::operator %= ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) %= num;
    }
    
    Number & Number::operator %= ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) %= num;
    }
    
    Number & Number::operator %= ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) %= num;
    }
    
    Number & Number::operator ^= ( const Number & value )
    {
        if( this->_cfObject == NULL && value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( value._cfObject == NULL )
        {
            return *( this );
        }
        
        this->SetSInt64Value( this->GetSInt64Value() ^ value.GetSInt64Value() );
        
        return *( this );
    }
    
    Number & Number::operator ^= ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^= num;
    }
    
    Number & Number::operator ^= ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^= num;
    }
    
    Number & Number::operator ^= ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^= num;
    }
    
    Number & Number::operator ^= ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^= num;
    }
    
    Number & Number::operator ^= ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^= num;
    }
    
    Number & Number::operator ^= ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^= num;
    }
    
    Number & Number::operator ^= ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^= num;
    }
    
    Number & Number::operator <<= ( const Number & value )
    {
        if( this->_cfObject == NULL && value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( value._cfObject == NULL )
        {
            return *( this );
        }
        
        this->SetSInt64Value( this->GetSInt64Value() << value.GetSInt64Value() );
        
        return *( this );
    }
    
    Number & Number::operator <<= ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) <<= num;
    }
    
    Number & Number::operator <<= ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) <<= num;
    }
    
    Number & Number::operator <<= ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) <<= num;
    }
    
    Number & Number::operator <<= ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) <<= num;
    }
    
    Number & Number::operator <<= ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) <<= num;
    }
    
    Number & Number::operator <<= ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) <<= num;
    }
    
    Number & Number::operator <<= ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) <<= num;
    }
    
    Number & Number::operator >>= ( const Number & value )
    {
        if( this->_cfObject == NULL && value._cfObject == NULL )
        {
            return *( this );
        }
        
        if( value._cfObject == NULL )
        {
            return *( this );
        }
        
        this->SetSInt64Value( this->GetSInt64Value() >> value.GetSInt64Value() );
        
        return *( this );
    }
    
    Number & Number::operator >>= ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >>= num;
    }
    
    Number & Number::operator >>= ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >>= num;
    }
    
    Number & Number::operator >>= ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >>= num;
    }
    
    Number & Number::operator >>= ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >>= num;
    }
    
    Number & Number::operator >>= ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >>= num;
    }
    
    Number & Number::operator >>= ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >>= num;
    }
    
    Number & Number::operator >>= ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >>= num;
    }
    
    Number Number::operator + ( const Number & value )
    {
        Number num;
        
        num = *( this );
        
        return num += value;
    }
    
    Number Number::operator + ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) + num;
    }
    
    Number Number::operator + ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) + num;
    }
    
    Number Number::operator + ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) + num;
    }
    
    Number Number::operator + ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) + num;
    }
    
    Number Number::operator + ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) + num;
    }
    
    Number Number::operator + ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) + num;
    }
    
    Number Number::operator + ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) + num;
    }
    
    Number Number::operator - ( const Number & value )
    {
        Number num;
        
        num = *( this );
        
        return num -= value;
    }
    
    Number Number::operator - ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) - num;
    }
    
    Number Number::operator - ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) - num;
    }
    
    Number Number::operator - ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) - num;
    }
    
    Number Number::operator - ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) - num;
    }
    
    Number Number::operator - ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) - num;
    }
    
    Number Number::operator - ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) - num;
    }
    
    Number Number::operator - ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) - num;
    }
    
    Number Number::operator * ( const Number & value )
    {
        Number num;
        
        num = *( this );
        
        return num *= value;
    }
    
    Number Number::operator * ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) * num;
    }
    
    Number Number::operator * ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) * num;
    }
    
    Number Number::operator * ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) * num;
    }
    
    Number Number::operator * ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) * num;
    }
    
    Number Number::operator * ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) * num;
    }
    
    Number Number::operator * ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) * num;
    }
    
    Number Number::operator * ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) * num;
    }
    
    Number Number::operator / ( const Number & value )
    {
        Number num;
        
        num = *( this );
        
        return num /= value;
    }
    
    Number Number::operator / ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) / num;
    }
    
    Number Number::operator / ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) / num;
    }
    
    Number Number::operator / ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) / num;
    }
    
    Number Number::operator / ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) / num;
    }
    
    Number Number::operator / ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) / num;
    }
    
    Number Number::operator / ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) / num;
    }
    
    Number Number::operator / ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) / num;
    }
    
    Number Number::operator % ( const Number & value )
    {
        Number num;
        
        num = *( this );
        
        return num %= value;
    }
    
    Number Number::operator % ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) % num;
    }
    
    Number Number::operator % ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) % num;
    }
    
    Number Number::operator % ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) % num;
    }
    
    Number Number::operator % ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) % num;
    }
    
    Number Number::operator % ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) % num;
    }
    
    Number Number::operator % ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) % num;
    }
    
    Number Number::operator % ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) % num;
    }
    
    Number Number::operator & ( const Number & value )
    {
        Number num;
        
        num = *( this );
        
        return num &= value;
    }
    
    Number Number::operator & ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) & num;
    }
    
    Number Number::operator & ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) & num;
    }
    
    Number Number::operator & ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) & num;
    }
    
    Number Number::operator & ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) & num;
    }
    
    Number Number::operator & ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) & num;
    }
    
    Number Number::operator & ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) & num;
    }
    
    Number Number::operator & ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) & num;
    }
    
    Number Number::operator | ( const Number & value )
    {
        Number num;
        
        num = *( this );
        
        return num |= value;
    }
    
    Number Number::operator | ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) | num;
    }
    
    Number Number::operator | ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) | num;
    }
    
    Number Number::operator | ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) | num;
    }
    
    Number Number::operator | ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) | num;
    }
    
    Number Number::operator | ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) | num;
    }
    
    Number Number::operator | ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) | num;
    }
    
    Number Number::operator | ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) | num;
    }
    
    Number Number::operator ^ ( const Number & value )
    {
        Number num;
        
        num = *( this );
        
        return num ^= value;
    }
    
    Number Number::operator ^ ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^ num;
    }
    
    Number Number::operator ^ ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^ num;
    }
    
    Number Number::operator ^ ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^ num;
    }
    
    Number Number::operator ^ ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^ num;
    }
    
    Number Number::operator ^ ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^ num;
    }
    
    Number Number::operator ^ ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^ num;
    }
    
    Number Number::operator ^ ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) ^ num;
    }
    
    Number Number::operator << ( const Number & value )
    {
        Number num;
        
        num = *( this );
        
        return num <<= value;
    }
    
    Number Number::operator << ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) << num;
    }
    
    Number Number::operator << ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) << num;
    }
    
    Number Number::operator << ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) << num;
    }
    
    Number Number::operator << ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) << num;
    }
    
    Number Number::operator << ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) << num;
    }
    
    Number Number::operator << ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) << num;
    }
    
    Number Number::operator << ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) << num;
    }
    
    Number Number::operator >> ( const Number & value )
    {
        Number num;
        
        num = *( this );
        
        return num >>= value;
    }
    
    Number Number::operator >> ( CFNumberRef value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >> num;
    }
    
    Number Number::operator >> ( Number::SInt8 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >> num;
    }
    
    Number Number::operator >> ( Number::SInt16 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >> num;
    }
    
    Number Number::operator >> ( Number::SInt32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >> num;
    }
    
    Number Number::operator >> ( Number::SInt64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >> num;
    }
    
    Number Number::operator >> ( Float32 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >> num;
    }
    
    Number Number::operator >> ( Float64 value )
    {
        Number num;
        
        num = value;
        
        return *( this ) >> num;
    }
            
    Number::operator Number::SInt8 ()
    {
        return this->GetSInt8Value();
    }
    
    Number::operator Number::SInt16 ()
    {
        return this->GetSInt16Value();
    }
    
    Number::operator Number::SInt32 ()
    {
        return this->GetSInt32Value();
    }
    
    Number::operator Number::SInt64 ()
    {
        return this->GetSInt64Value();
    }
    
    Number::operator Float32 ()
    {
        return this->GetFloat32Value();
    }
    
    Number::operator Float64 ()
    {
        return this->GetFloat64Value();
    }
    
    CFTypeID Number::GetTypeID( void ) const
    {
        return CFNullGetTypeID();
    }
    
    CFTypeRef Number::GetCFObject( void ) const
    {
        return this->_cfObject;
    }
    
    bool Number::IsFloatType( void ) const
    {
        if( this->_cfObject == NULL )
        {
            return false;
        }
        
        return ( CFNumberIsFloatType( this->_cfObject ) ) ? true : false;
    }
    
    Number::SInt8 Number::GetSInt8Value( void ) const
    {
        Number::SInt8 value;
        
        if( this->_cfObject == NULL )
        {
            return ( Number::SInt8 )0;
        }
        
        CFNumberGetValue( this->_cfObject, kCFNumberSInt8Type, &value );
        
        return value;
    }
    
    Number::SInt16 Number::GetSInt16Value( void ) const
    {
        Number::SInt16 value;
        
        if( this->_cfObject == NULL )
        {
            return ( Number::SInt16 )0;
        }
        
        CFNumberGetValue( this->_cfObject, kCFNumberSInt16Type, &value );
        
        return value;
    }
    
    Number::SInt32 Number::GetSInt32Value( void ) const
    {
        Number::SInt32 value;
        
        if( this->_cfObject == NULL )
        {
            return ( Number::SInt32 )0;
        }
        
        CFNumberGetValue( this->_cfObject, kCFNumberSInt32Type, &value );
        
        return value;
    }
    
    Number::SInt64 Number::GetSInt64Value( void ) const
    {
        Number::SInt64 value;
        
        if( this->_cfObject == NULL )
        {
            return ( Number::SInt64 )0;
        }
        
        CFNumberGetValue( this->_cfObject, kCFNumberSInt64Type, &value );
        
        return value;
    }
    
    Number::Float32 Number::GetFloat32Value( void ) const
    {
        Float32 value;
        
        if( this->_cfObject == NULL )
        {
            return ( Float32 )0;
        }
        
        CFNumberGetValue( this->_cfObject, kCFNumberFloat32Type, &value );
        
        return value;
    }
    
    Number::Float64 Number::GetFloat64Value( void ) const
    {
        Float64 value;
        
        if( this->_cfObject == NULL )
        {
            return ( Float64 )0;
        }
        
        CFNumberGetValue( this->_cfObject, kCFNumberFloat64Type, &value );
        
        return value;
    }
    
    void Number::SetSInt8Value( Number::SInt8 value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        this->_cfObject = CFNumberCreate( ( CFAllocatorRef )NULL, kCFNumberSInt8Type, &value );
    }
    
    void Number::SetSInt16Value( Number::SInt16 value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        this->_cfObject = CFNumberCreate( ( CFAllocatorRef )NULL, kCFNumberSInt16Type, &value );
    }
    
    void Number::SetSInt32Value( Number::SInt32 value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        this->_cfObject = CFNumberCreate( ( CFAllocatorRef )NULL, kCFNumberSInt32Type, &value );
    }
    
    void Number::SetSInt64Value( Number::SInt64 value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        this->_cfObject = CFNumberCreate( ( CFAllocatorRef )NULL, kCFNumberSInt64Type, &value );
    }
    
    void Number::SetFloat32Value( Number::Float32 value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        this->_cfObject = CFNumberCreate( ( CFAllocatorRef )NULL, kCFNumberFloat32Type, &value );
    }
    
    void Number::SetFloat64Value( Number::Float64 value )
    {
        if( this->_cfObject != NULL )
        {
            CFRelease( this->_cfObject );
        }
        
        this->_cfObject = CFNumberCreate( ( CFAllocatorRef )NULL, kCFNumberFloat64Type, &value );
    }
}
