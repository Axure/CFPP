/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        CFPP-Number.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    Unit tests for CF::Number
 */

#include <CF++.h>
#include <GoogleMock/GoogleMock.h>

using namespace testing;

static bool FloatIsEqual( CF::Number::Float32 x, CF::Number::Float32 y );
static bool FloatIsEqual( CF::Number::Float64 x, CF::Number::Float64 y );

static bool FloatIsEqual( CF::Number::Float32 x, CF::Number::Float32 y )
{
    return fabsf( x - y ) < FLT_EPSILON;
}

static bool FloatIsEqual( CF::Number::Float64 x, CF::Number::Float64 y )
{
    return fabs( x - y ) < DBL_EPSILON;
}

TEST( CFPP_Number, CTOR )
{
    CF::Number n;
    
    ASSERT_TRUE( n.IsValid() );
    ASSERT_EQ( n, 0 );
}

TEST( CFPP_Number, CTOR_CFType )
{}

TEST( CFPP_Number, CTOR_CFNumber )
{}

TEST( CFPP_Number, CTOR_CFType_SInt8 )
{}

TEST( CFPP_Number, CTOR_CFType_SInt16 )
{}

TEST( CFPP_Number, CTOR_CFType_SInt32 )
{}

TEST( CFPP_Number, CTOR_CFType_SInt64 )
{}

TEST( CFPP_Number, CTOR_CFType_UInt8 )
{}

TEST( CFPP_Number, CTOR_CFType_UInt16 )
{}

TEST( CFPP_Number, CTOR_CFType_UInt32 )
{}

TEST( CFPP_Number, CTOR_CFType_UInt64 )
{}

TEST( CFPP_Number, CTOR_CFType_Float32 )
{}

TEST( CFPP_Number, CTOR_CFType_Float64 )
{}

TEST( CFPP_Number, CTOR_CFNumber_SInt8 )
{}

TEST( CFPP_Number, CTOR_CFNumber_SInt16 )
{}

TEST( CFPP_Number, CTOR_CFNumber_SInt32 )
{}

TEST( CFPP_Number, CTOR_CFNumber_SInt64 )
{}

TEST( CFPP_Number, CTOR_CFNumber_UInt8 )
{}

TEST( CFPP_Number, CTOR_CFNumber_UInt16 )
{}

TEST( CFPP_Number, CTOR_CFNumber_UInt32 )
{}

TEST( CFPP_Number, CTOR_CFNumber_UInt64 )
{}

TEST( CFPP_Number, CTOR_CFNumber_Float32 )
{}

TEST( CFPP_Number, CTOR_CFNumber_Float64 )
{}

TEST( CFPP_Number, CTOR_SInt8 )
{}

TEST( CFPP_Number, CTOR_SInt16 )
{}

TEST( CFPP_Number, CTOR_SInt32 )
{}

TEST( CFPP_Number, CTOR_SInt64 )
{}

TEST( CFPP_Number, CTOR_UInt8 )
{}

TEST( CFPP_Number, CTOR_UInt16 )
{}

TEST( CFPP_Number, CTOR_UInt32 )
{}

TEST( CFPP_Number, CTOR_UInt64 )
{}

TEST( CFPP_Number, CTOR_Float32 )
{}

TEST( CFPP_Number, CTOR_Float64 )
{}

TEST( CFPP_Number, CCTOR )
{}

TEST( CFPP_Number, MCTOR )
{}

TEST( CFPP_Number, OperatorAssignNumber )
{}

TEST( CFPP_Number, OperatorAssignCFType )
{}

TEST( CFPP_Number, OperatorAssignCFNumber )
{}

TEST( CFPP_Number, OperatorAssignSInt8 )
{}

TEST( CFPP_Number, OperatorAssignSInt16 )
{}

TEST( CFPP_Number, OperatorAssignSInt32 )
{}

TEST( CFPP_Number, OperatorAssignSInt64 )
{}

TEST( CFPP_Number, OperatorAssignUInt8 )
{}

TEST( CFPP_Number, OperatorAssignUInt16 )
{}

TEST( CFPP_Number, OperatorAssignUInt32 )
{}

TEST( CFPP_Number, OperatorAssignUInt64 )
{}

TEST( CFPP_Number, OperatorAssignFloat32 )
{}

TEST( CFPP_Number, OperatorAssignFloat64 )
{}

TEST( CFPP_Number, OperatorEqualNumber )
{}

TEST( CFPP_Number, OperatorEqualCFType )
{}

TEST( CFPP_Number, OperatorEqualCFNumber )
{}

TEST( CFPP_Number, OperatorEqualSInt8 )
{}

TEST( CFPP_Number, OperatorEqualSInt16 )
{}

TEST( CFPP_Number, OperatorEqualSInt32 )
{}

TEST( CFPP_Number, OperatorEqualSInt64 )
{}

TEST( CFPP_Number, OperatorEqualUInt8 )
{}

TEST( CFPP_Number, OperatorEqualUInt16 )
{}

TEST( CFPP_Number, OperatorEqualUInt32 )
{}

TEST( CFPP_Number, OperatorEqualUInt64 )
{}

TEST( CFPP_Number, OperatorEqualFloat32 )
{}

TEST( CFPP_Number, OperatorEqualFloat64 )
{}

TEST( CFPP_Number, OperatorNotEqualNumber )
{}

TEST( CFPP_Number, OperatorNotEqualCFType )
{}

TEST( CFPP_Number, OperatorNotEqualCFNumber )
{}

TEST( CFPP_Number, OperatorNotEqualSInt8 )
{}

TEST( CFPP_Number, OperatorNotEqualSInt16 )
{}

TEST( CFPP_Number, OperatorNotEqualSInt32 )
{}

TEST( CFPP_Number, OperatorNotEqualSInt64 )
{}

TEST( CFPP_Number, OperatorNotEqualUInt8 )
{}

TEST( CFPP_Number, OperatorNotEqualUInt16 )
{}

TEST( CFPP_Number, OperatorNotEqualUInt32 )
{}

TEST( CFPP_Number, OperatorNotEqualUInt64 )
{}

TEST( CFPP_Number, OperatorNotEqualFloat32 )
{}

TEST( CFPP_Number, OperatorNotEqualFloat64 )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualNumber )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualCFType )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualCFNumber )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualSInt8 )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualSInt16 )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualSInt32 )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualSInt64 )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualUInt8 )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualUInt16 )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualUInt32 )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualUInt64 )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualFloat32 )
{}

TEST( CFPP_Number, OperatorGreaterOrEqualFloat64 )
{}

TEST( CFPP_Number, OperatorLesserOrEqualNumber )
{}

TEST( CFPP_Number, OperatorLesserOrEqualCFType )
{}

TEST( CFPP_Number, OperatorLesserOrEqualCFNumber )
{}

TEST( CFPP_Number, OperatorLesserOrEqualSInt8 )
{}

TEST( CFPP_Number, OperatorLesserOrEqualSInt16 )
{}

TEST( CFPP_Number, OperatorLesserOrEqualSInt32 )
{}

TEST( CFPP_Number, OperatorLesserOrEqualSInt64 )
{}

TEST( CFPP_Number, OperatorLesserOrEqualUInt8 )
{}

TEST( CFPP_Number, OperatorLesserOrEqualUInt16 )
{}

TEST( CFPP_Number, OperatorLesserOrEqualUInt32 )
{}

TEST( CFPP_Number, OperatorLesserOrEqualUInt64 )
{}

TEST( CFPP_Number, OperatorLesserOrEqualFloat32 )
{}

TEST( CFPP_Number, OperatorLesserOrEqualFloat64 )
{}

TEST( CFPP_Number, OperatorGreaterNumber )
{}

TEST( CFPP_Number, OperatorGreaterCFType )
{}

TEST( CFPP_Number, OperatorGreaterCFNumber )
{}

TEST( CFPP_Number, OperatorGreaterSInt8 )
{}

TEST( CFPP_Number, OperatorGreaterSInt16 )
{}

TEST( CFPP_Number, OperatorGreaterSInt32 )
{}

TEST( CFPP_Number, OperatorGreaterSInt64 )
{}

TEST( CFPP_Number, OperatorGreaterUInt8 )
{}

TEST( CFPP_Number, OperatorGreaterUInt16 )
{}

TEST( CFPP_Number, OperatorGreaterUInt32 )
{}

TEST( CFPP_Number, OperatorGreaterUInt64 )
{}

TEST( CFPP_Number, OperatorGreaterFloat32 )
{}

TEST( CFPP_Number, OperatorGreaterFloat64 )
{}

TEST( CFPP_Number, OperatorLesserNumber )
{}

TEST( CFPP_Number, OperatorLesserCFType )
{}

TEST( CFPP_Number, OperatorLesserCFNumber )
{}

TEST( CFPP_Number, OperatorLesserSInt8 )
{}

TEST( CFPP_Number, OperatorLesserSInt16 )
{}

TEST( CFPP_Number, OperatorLesserSInt32 )
{}

TEST( CFPP_Number, OperatorLesserSInt64 )
{}

TEST( CFPP_Number, OperatorLesserUInt8 )
{}

TEST( CFPP_Number, OperatorLesserUInt16 )
{}

TEST( CFPP_Number, OperatorLesserUInt32 )
{}

TEST( CFPP_Number, OperatorLesserUInt64 )
{}

TEST( CFPP_Number, OperatorLesserFloat32 )
{}

TEST( CFPP_Number, OperatorLesserFloat64 )
{}

TEST( CFPP_Number, OperatorAndNumber )
{}

TEST( CFPP_Number, OperatorAndCFType )
{}

TEST( CFPP_Number, OperatorAndCFNumber )
{}

TEST( CFPP_Number, OperatorAndSInt8 )
{}

TEST( CFPP_Number, OperatorAndSInt16 )
{}

TEST( CFPP_Number, OperatorAndSInt32 )
{}

TEST( CFPP_Number, OperatorAndSInt64 )
{}

TEST( CFPP_Number, OperatorAndUInt8 )
{}

TEST( CFPP_Number, OperatorAndUInt16 )
{}

TEST( CFPP_Number, OperatorAndUInt32 )
{}

TEST( CFPP_Number, OperatorAndUInt64 )
{}

TEST( CFPP_Number, OperatorAndFloat32 )
{}

TEST( CFPP_Number, OperatorAndFloat64 )
{}

TEST( CFPP_Number, OperatorOrNumber )
{}

TEST( CFPP_Number, OperatorOrCFType )
{}

TEST( CFPP_Number, OperatorOrCFNumber )
{}

TEST( CFPP_Number, OperatorOrSInt8 )
{}

TEST( CFPP_Number, OperatorOrSInt16 )
{}

TEST( CFPP_Number, OperatorOrSInt32 )
{}

TEST( CFPP_Number, OperatorOrSInt64 )
{}

TEST( CFPP_Number, OperatorOrUInt8 )
{}

TEST( CFPP_Number, OperatorOrUInt16 )
{}

TEST( CFPP_Number, OperatorOrUInt32 )
{}

TEST( CFPP_Number, OperatorOrUInt64 )
{}

TEST( CFPP_Number, OperatorOrFloat32 )
{}

TEST( CFPP_Number, OperatorOrFloat64 )
{}

TEST( CFPP_Number, OperatorBitwiseNot )
{}

TEST( CFPP_Number, OperatorLogicalNot )
{}

TEST( CFPP_Number, OperatorPrefixIncrement )
{}

TEST( CFPP_Number, OperatorPosfixIncrement )
{}

TEST( CFPP_Number, OperatorPrefixDecrement )
{}

TEST( CFPP_Number, OperatorPostfixDecrement )
{}

TEST( CFPP_Number, OperatorPlusEqualNumber )
{}

TEST( CFPP_Number, OperatorPlusEqualCFType )
{}

TEST( CFPP_Number, OperatorPlusEqualCFNumber )
{}

TEST( CFPP_Number, OperatorPlusEqualSInt8 )
{}

TEST( CFPP_Number, OperatorPlusEqualSInt16 )
{}

TEST( CFPP_Number, OperatorPlusEqualSInt32 )
{}

TEST( CFPP_Number, OperatorPlusEqualSInt64 )
{}

TEST( CFPP_Number, OperatorPlusEqualUInt8 )
{}

TEST( CFPP_Number, OperatorPlusEqualUInt16 )
{}

TEST( CFPP_Number, OperatorPlusEqualUInt32 )
{}

TEST( CFPP_Number, OperatorPlusEqualUInt64 )
{}

TEST( CFPP_Number, OperatorPlusEqualFloat32 )
{}

TEST( CFPP_Number, OperatorPlusEqualFloat64 )
{}

TEST( CFPP_Number, OperatorMinusEqualNumber )
{}

TEST( CFPP_Number, OperatorMinusEqualCFType )
{}

TEST( CFPP_Number, OperatorMinusEqualCFNumber )
{}

TEST( CFPP_Number, OperatorMinusEqualSInt8 )
{}

TEST( CFPP_Number, OperatorMinusEqualSInt16 )
{}

TEST( CFPP_Number, OperatorMinusEqualSInt32 )
{}

TEST( CFPP_Number, OperatorMinusEqualSInt64 )
{}

TEST( CFPP_Number, OperatorMinusEqualUInt8 )
{}

TEST( CFPP_Number, OperatorMinusEqualUInt16 )
{}

TEST( CFPP_Number, OperatorMinusEqualUInt32 )
{}

TEST( CFPP_Number, OperatorMinusEqualUInt64 )
{}

TEST( CFPP_Number, OperatorMinusEqualFloat32 )
{}

TEST( CFPP_Number, OperatorMinusEqualFloat64 )
{}

TEST( CFPP_Number, OperatorMultiplyEqualNumber )
{}

TEST( CFPP_Number, OperatorMultiplyEqualCFType )
{}

TEST( CFPP_Number, OperatorMultiplyEqualCFNumber )
{}

TEST( CFPP_Number, OperatorMultiplyEqualSInt8 )
{}

TEST( CFPP_Number, OperatorMultiplyEqualSInt16 )
{}

TEST( CFPP_Number, OperatorMultiplyEqualSInt32 )
{}

TEST( CFPP_Number, OperatorMultiplyEqualSInt64 )
{}

TEST( CFPP_Number, OperatorMultiplyEqualUInt8 )
{}

TEST( CFPP_Number, OperatorMultiplyEqualUInt16 )
{}

TEST( CFPP_Number, OperatorMultiplyEqualUInt32 )
{}

TEST( CFPP_Number, OperatorMultiplyEqualUInt64 )
{}

TEST( CFPP_Number, OperatorMultiplyEqualFloat32 )
{}

TEST( CFPP_Number, OperatorMultiplyEqualFloat64 )
{}

TEST( CFPP_Number, OperatorDivideEqualNumber )
{}

TEST( CFPP_Number, OperatorDivideEqualCFType )
{}

TEST( CFPP_Number, OperatorDivideEqualCFNumber )
{}

TEST( CFPP_Number, OperatorDivideEqualSInt8 )
{}

TEST( CFPP_Number, OperatorDivideEqualSInt16 )
{}

TEST( CFPP_Number, OperatorDivideEqualSInt32 )
{}

TEST( CFPP_Number, OperatorDivideEqualSInt64 )
{}

TEST( CFPP_Number, OperatorDivideEqualUInt8 )
{}

TEST( CFPP_Number, OperatorDivideEqualUInt16 )
{}

TEST( CFPP_Number, OperatorDivideEqualUInt32 )
{}

TEST( CFPP_Number, OperatorDivideEqualUInt64 )
{}

TEST( CFPP_Number, OperatorDivideEqualFloat32 )
{}

TEST( CFPP_Number, OperatorDivideEqualFloat64 )
{}

TEST( CFPP_Number, OperatorDivideOrEqualNumber )
{}

TEST( CFPP_Number, OperatorDivideOrEqualCFType )
{}

TEST( CFPP_Number, OperatorDivideOrEqualCFNumber )
{}

TEST( CFPP_Number, OperatorDivideOrEqualSInt8 )
{}

TEST( CFPP_Number, OperatorDivideOrEqualSInt16 )
{}

TEST( CFPP_Number, OperatorDivideOrEqualSInt32 )
{}

TEST( CFPP_Number, OperatorDivideOrEqualSInt64 )
{}

TEST( CFPP_Number, OperatorDivideOrEqualUInt8 )
{}

TEST( CFPP_Number, OperatorDivideOrEqualUInt16 )
{}

TEST( CFPP_Number, OperatorDivideOrEqualUInt32 )
{}

TEST( CFPP_Number, OperatorDivideOrEqualUInt64 )
{}

TEST( CFPP_Number, OperatorDivideOrEqualFloat32 )
{}

TEST( CFPP_Number, OperatorDivideOrEqualFloat64 )
{}

TEST( CFPP_Number, OperatorDivideAndEqualNumber )
{}

TEST( CFPP_Number, OperatorDivideAndEqualCFType )
{}

TEST( CFPP_Number, OperatorDivideAndEqualCFNumber )
{}

TEST( CFPP_Number, OperatorDivideAndEqualSInt8 )
{}

TEST( CFPP_Number, OperatorDivideAndEqualSInt16 )
{}

TEST( CFPP_Number, OperatorDivideAndEqualSInt32 )
{}

TEST( CFPP_Number, OperatorDivideAndEqualSInt64 )
{}

TEST( CFPP_Number, OperatorDivideAndEqualUInt8 )
{}

TEST( CFPP_Number, OperatorDivideAndEqualUInt16 )
{}

TEST( CFPP_Number, OperatorDivideAndEqualUInt32 )
{}

TEST( CFPP_Number, OperatorDivideAndEqualUInt64 )
{}

TEST( CFPP_Number, OperatorDivideAndEqualFloat32 )
{}

TEST( CFPP_Number, OperatorDivideAndEqualFloat64 )
{}

TEST( CFPP_Number, OperatorModEqualNumber )
{}

TEST( CFPP_Number, OperatorModEqualCFType )
{}

TEST( CFPP_Number, OperatorModEqualCFNumber )
{}

TEST( CFPP_Number, OperatorModEqualSInt8 )
{}

TEST( CFPP_Number, OperatorModEqualSInt16 )
{}

TEST( CFPP_Number, OperatorModEqualSInt32 )
{}

TEST( CFPP_Number, OperatorModEqualSInt64 )
{}

TEST( CFPP_Number, OperatorModEqualUInt8 )
{}

TEST( CFPP_Number, OperatorModEqualUInt16 )
{}

TEST( CFPP_Number, OperatorModEqualUInt32 )
{}

TEST( CFPP_Number, OperatorModEqualUInt64 )
{}

TEST( CFPP_Number, OperatorXorEqualNumber )
{}

TEST( CFPP_Number, OperatorXorEqualCFType )
{}

TEST( CFPP_Number, OperatorXorEqualCFNumber )
{}

TEST( CFPP_Number, OperatorXorEqualSInt8 )
{}

TEST( CFPP_Number, OperatorXorEqualSInt16 )
{}

TEST( CFPP_Number, OperatorXorEqualSInt32 )
{}

TEST( CFPP_Number, OperatorXorEqualSInt64 )
{}

TEST( CFPP_Number, OperatorXorEqualUInt8 )
{}

TEST( CFPP_Number, OperatorXorEqualUInt16 )
{}

TEST( CFPP_Number, OperatorXorEqualUInt32 )
{}

TEST( CFPP_Number, OperatorXorEqualUInt64 )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualNumber )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualCFType )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualCFNumber )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualSInt8 )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualSInt16 )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualSInt32 )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualSInt64 )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualUInt8 )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualUInt16 )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualUInt32 )
{}

TEST( CFPP_Number, OperatorLeftShiftEqualUInt64 )
{}

TEST( CFPP_Number, OperatorRightShiftEqualNumber )
{}

TEST( CFPP_Number, OperatorRightShiftEqualCFType )
{}

TEST( CFPP_Number, OperatorRightShiftEqualCFNumber )
{}

TEST( CFPP_Number, OperatorRightShiftEqualSInt8 )
{}

TEST( CFPP_Number, OperatorRightShiftEqualSInt16 )
{}

TEST( CFPP_Number, OperatorRightShiftEqualSInt32 )
{}

TEST( CFPP_Number, OperatorRightShiftEqualSInt64 )
{}

TEST( CFPP_Number, OperatorRightShiftEqualUInt8 )
{}

TEST( CFPP_Number, OperatorRightShiftEqualUInt16 )
{}

TEST( CFPP_Number, OperatorRightShiftEqualUInt32 )
{}

TEST( CFPP_Number, OperatorRightShiftEqualUInt64 )
{}

TEST( CFPP_Number, OperatorPlusNumber )
{}

TEST( CFPP_Number, OperatorPlusCFType )
{}

TEST( CFPP_Number, OperatorPlusCFNumber )
{}

TEST( CFPP_Number, OperatorPlusSInt8 )
{}

TEST( CFPP_Number, OperatorPlusSInt16 )
{}

TEST( CFPP_Number, OperatorPlusSInt32 )
{}

TEST( CFPP_Number, OperatorPlusSInt64 )
{}

TEST( CFPP_Number, OperatorPlusUInt8 )
{}

TEST( CFPP_Number, OperatorPlusUInt16 )
{}

TEST( CFPP_Number, OperatorPlusUInt32 )
{}

TEST( CFPP_Number, OperatorPlusUInt64 )
{}

TEST( CFPP_Number, OperatorPlusFloat32 )
{}

TEST( CFPP_Number, OperatorPlusFloat64 )
{}

TEST( CFPP_Number, OperatorMinusNumber )
{}

TEST( CFPP_Number, OperatorMinusCFType )
{}

TEST( CFPP_Number, OperatorMinusCFNumber )
{}

TEST( CFPP_Number, OperatorMinusSInt8 )
{}

TEST( CFPP_Number, OperatorMinusSInt16 )
{}

TEST( CFPP_Number, OperatorMinusSInt32 )
{}

TEST( CFPP_Number, OperatorMinusSInt64 )
{}

TEST( CFPP_Number, OperatorMinusUInt8 )
{}

TEST( CFPP_Number, OperatorMinusUInt16 )
{}

TEST( CFPP_Number, OperatorMinusUInt32 )
{}

TEST( CFPP_Number, OperatorMinusUInt64 )
{}

TEST( CFPP_Number, OperatorMinusFloat32 )
{}

TEST( CFPP_Number, OperatorMinusFloat64 )
{}

TEST( CFPP_Number, OperatorMultiplyNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * CF::Number( 10 ),   0 );
    ASSERT_EQ( n2 * CF::Number( 10 ), 420 );
    ASSERT_EQ( n3 * CF::Number( 10 ),   0 );
    
    ASSERT_EQ( n1 * n3, 0 );
    ASSERT_EQ( n2 * n3, 0 );
    ASSERT_EQ( n3 * n3, 0 );
}

TEST( CFPP_Number, OperatorMultiplyCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ),   0 );
    ASSERT_EQ( n2 * static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 420 );
    ASSERT_EQ( n3 * static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ),   0 );
    
    ASSERT_EQ( n1 * static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n2 * static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n3 * static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 * static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n2 * static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n3 * static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
}

TEST( CFPP_Number, OperatorMultiplyCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ),   0 );
    ASSERT_EQ( n2 * static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 420 );
    ASSERT_EQ( n3 * static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ),   0 );
    
    ASSERT_EQ( n1 * static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n2 * static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n3 * static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 * static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n2 * static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n3 * static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
}

TEST( CFPP_Number, OperatorMultiplySInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CF::Number::SInt8 >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< CF::Number::SInt8 >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< CF::Number::SInt8 >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorMultiplySInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CF::Number::SInt16 >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< CF::Number::SInt16 >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< CF::Number::SInt16 >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorMultiplySInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CF::Number::SInt32 >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< CF::Number::SInt32 >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< CF::Number::SInt32 >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorMultiplySInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CF::Number::SInt64 >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< CF::Number::SInt64 >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< CF::Number::SInt64 >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorMultiplyUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CF::Number::UInt8 >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< CF::Number::UInt8 >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< CF::Number::UInt8 >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorMultiplyUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CF::Number::UInt16 >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< CF::Number::UInt16 >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< CF::Number::UInt16 >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorMultiplyUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CF::Number::UInt32 >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< CF::Number::UInt32 >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< CF::Number::UInt32 >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorMultiplyUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CF::Number::UInt64 >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< CF::Number::UInt64 >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< CF::Number::UInt64 >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorMultiplyFloat32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CF::Number::Float32 >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< CF::Number::Float32 >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< CF::Number::Float32 >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorMultiplyFloat64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 * static_cast< CF::Number::Float64 >( 10 ),   0 );
    ASSERT_EQ( n2 * static_cast< CF::Number::Float64 >( 10 ), 420 );
    ASSERT_EQ( n3 * static_cast< CF::Number::Float64 >( 10 ),   0 );
}

TEST( CFPP_Number, OperatorDivideNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / CF::Number( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / CF::Number( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / CF::Number( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / n3, std::runtime_error );
    ASSERT_THROW( n2 / n3, std::runtime_error );
    ASSERT_THROW( n3 / n3, std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 / static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 / static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CF::Number::SInt8 >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CF::Number::SInt8 >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CF::Number::SInt8 >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CF::Number::SInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CF::Number::SInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CF::Number::SInt8 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CF::Number::SInt16 >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CF::Number::SInt16 >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CF::Number::SInt16 >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CF::Number::SInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CF::Number::SInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CF::Number::SInt16 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CF::Number::SInt32 >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CF::Number::SInt32 >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CF::Number::SInt32 >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CF::Number::SInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CF::Number::SInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CF::Number::SInt32 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CF::Number::SInt64 >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CF::Number::SInt64 >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CF::Number::SInt64 >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CF::Number::SInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CF::Number::SInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CF::Number::SInt64 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CF::Number::UInt8 >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CF::Number::UInt8 >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CF::Number::UInt8 >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CF::Number::UInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CF::Number::UInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CF::Number::UInt8 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CF::Number::UInt16 >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CF::Number::UInt16 >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CF::Number::UInt16 >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CF::Number::UInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CF::Number::UInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CF::Number::UInt16 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CF::Number::UInt32 >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CF::Number::UInt32 >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CF::Number::UInt32 >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CF::Number::UInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CF::Number::UInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CF::Number::UInt32 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CF::Number::UInt64 >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CF::Number::UInt64 >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CF::Number::UInt64 >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CF::Number::UInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CF::Number::UInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CF::Number::UInt64 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideFloat32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CF::Number::Float32 >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CF::Number::Float32 >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CF::Number::Float32 >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CF::Number::Float32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CF::Number::Float32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CF::Number::Float32 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorDivideFloat64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( n1 / static_cast< CF::Number::Float64 >( 10 ), 0.0 ) );
    ASSERT_TRUE( FloatIsEqual( n2 / static_cast< CF::Number::Float64 >( 10 ), 4.2 ) );
    ASSERT_TRUE( FloatIsEqual( n3 / static_cast< CF::Number::Float64 >( 10 ), 0.0 ) );
    
    ASSERT_THROW( n1 / static_cast< CF::Number::Float64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 / static_cast< CF::Number::Float64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 / static_cast< CF::Number::Float64 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % CF::Number( 10 ), 0 );
    ASSERT_EQ( n2 % CF::Number( 10 ), 2 );
    ASSERT_EQ( n3 % CF::Number( 10 ), 0 );
    
    ASSERT_THROW( n1 % n3, std::runtime_error );
    ASSERT_THROW( n2 % n3, std::runtime_error );
    ASSERT_THROW( n3 % n3, std::runtime_error );
}

TEST( CFPP_Number, OperatorModCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 0 );
    ASSERT_EQ( n2 % static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 2 );
    ASSERT_EQ( n3 % static_cast< CFTypeRef >( CF::Number( 10 ).GetCFObject() ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CFTypeRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 % static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CFTypeRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 0 );
    ASSERT_EQ( n2 % static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 2 );
    ASSERT_EQ( n3 % static_cast< CFNumberRef >( CF::Number( 10 ).GetCFObject() ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CFNumberRef >( n3.GetCFObject() ), std::runtime_error );
    
    ASSERT_THROW( n1 % static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CFNumberRef >( CF::Array().GetCFObject() ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::SInt8 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::SInt8 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::SInt8 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::SInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::SInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::SInt8 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::SInt16 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::SInt16 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::SInt16 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::SInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::SInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::SInt16 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::SInt32 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::SInt32 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::SInt32 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::SInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::SInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::SInt32 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::SInt64 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::SInt64 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::SInt64 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::SInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::SInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::SInt64 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::UInt8 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::UInt8 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::UInt8 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::UInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::UInt8 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::UInt8 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::UInt16 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::UInt16 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::UInt16 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::UInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::UInt16 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::UInt16 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::UInt32 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::UInt32 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::UInt32 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::UInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::UInt32 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::UInt32 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorModUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 % static_cast< CF::Number::UInt64 >( 10 ), 0 );
    ASSERT_EQ( n2 % static_cast< CF::Number::UInt64 >( 10 ), 2 );
    ASSERT_EQ( n3 % static_cast< CF::Number::UInt64 >( 10 ), 0 );
    
    ASSERT_THROW( n1 % static_cast< CF::Number::UInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n2 % static_cast< CF::Number::UInt64 >( 0 ), std::runtime_error );
    ASSERT_THROW( n3 % static_cast< CF::Number::UInt64 >( 0 ), std::runtime_error );
}

TEST( CFPP_Number, OperatorBitwiseAndNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & CF::Number( 12 ), 0 );
    ASSERT_EQ( n2 & CF::Number( 12 ), 8 );
    ASSERT_EQ( n3 & CF::Number( 12 ), 0 );
    
    ASSERT_EQ( n1 & n3, 0 );
    ASSERT_EQ( n2 & n3, 0 );
    ASSERT_EQ( n3 & n3, 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CFTypeRef >( CF::Number( 12 ).GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFTypeRef >( CF::Number( 12 ).GetCFObject() ), 8 );
    ASSERT_EQ( n3 & static_cast< CFTypeRef >( CF::Number( 12 ).GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 & static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n3 & static_cast< CFTypeRef >( n3.GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 & static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n3 & static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CFNumberRef >( CF::Number( 12 ).GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFNumberRef >( CF::Number( 12 ).GetCFObject() ), 8 );
    ASSERT_EQ( n3 & static_cast< CFNumberRef >( CF::Number( 12 ).GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 & static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    ASSERT_EQ( n3 & static_cast< CFNumberRef >( n3.GetCFObject() ), 0 );
    
    ASSERT_EQ( n1 & static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n2 & static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
    ASSERT_EQ( n3 & static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::SInt8 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::SInt8 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::SInt8 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::SInt16 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::SInt16 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::SInt16 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::SInt32 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::SInt32 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::SInt32 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::SInt64 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::SInt64 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::SInt64 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::UInt8 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::UInt8 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::UInt8 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::UInt16 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::UInt16 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::UInt16 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::UInt32 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::UInt32 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::UInt32 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseAndUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 & static_cast< CF::Number::UInt64 >( 12 ), 0 );
    ASSERT_EQ( n2 & static_cast< CF::Number::UInt64 >( 12 ), 8 );
    ASSERT_EQ( n3 & static_cast< CF::Number::UInt64 >( 12 ), 0 );
}

TEST( CFPP_Number, OperatorBitwiseOrNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | CF::Number( 21 ), 21 );
    ASSERT_EQ( n2 | CF::Number( 21 ), 63 );
    ASSERT_EQ( n3 | CF::Number( 21 ), 21 );
    
    ASSERT_EQ( n1 | n3,  0 );
    ASSERT_EQ( n2 | n3, 42 );
    ASSERT_EQ( n3 | n3,  0 );
}

TEST( CFPP_Number, OperatorBitwiseOrCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CFTypeRef >( CF::Number( 21 ).GetCFObject() ), 21 );
    ASSERT_EQ( n2 | static_cast< CFTypeRef >( CF::Number( 21 ).GetCFObject() ), 63 );
    ASSERT_EQ( n3 | static_cast< CFTypeRef >( CF::Number( 21 ).GetCFObject() ), 21 );
    
    ASSERT_EQ( n1 | static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 | static_cast< CFTypeRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 | static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 | static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 | static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 | static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorBitwiseOrCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CFNumberRef >( CF::Number( 21 ).GetCFObject() ), 21 );
    ASSERT_EQ( n2 | static_cast< CFNumberRef >( CF::Number( 21 ).GetCFObject() ), 63 );
    ASSERT_EQ( n3 | static_cast< CFNumberRef >( CF::Number( 21 ).GetCFObject() ), 21 );
    
    ASSERT_EQ( n1 | static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 | static_cast< CFNumberRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 | static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 | static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 | static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 | static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorBitwiseOrSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::SInt8 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::SInt8 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::SInt8 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::SInt16 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::SInt16 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::SInt16 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::SInt32 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::SInt32 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::SInt32 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::SInt64 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::SInt64 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::SInt64 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::UInt8 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::UInt8 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::UInt8 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::UInt16 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::UInt16 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::UInt16 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::UInt32 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::UInt32 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::UInt32 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorBitwiseOrUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 | static_cast< CF::Number::UInt64 >( 21 ), 21 );
    ASSERT_EQ( n2 | static_cast< CF::Number::UInt64 >( 21 ), 63 );
    ASSERT_EQ( n3 | static_cast< CF::Number::UInt64 >( 21 ), 21 );
}

TEST( CFPP_Number, OperatorXorNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ CF::Number( 43 ), 43 );
    ASSERT_EQ( n2 ^ CF::Number( 43 ),  1 );
    ASSERT_EQ( n3 ^ CF::Number( 43 ), 43 );
    
    ASSERT_EQ( n1 ^ n3,  0 );
    ASSERT_EQ( n2 ^ n3, 42 );
    ASSERT_EQ( n3 ^ n3,  0 );
}

TEST( CFPP_Number, OperatorXorCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CFTypeRef >( CF::Number( 43 ).GetCFObject() ), 43 );
    
    ASSERT_EQ( n1 ^ static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 ^ static_cast< CFTypeRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 ^ static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 ^ static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 ^ static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 ^ static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorXorCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CFNumberRef >( CF::Number( 43 ).GetCFObject() ), 43 );
    
    ASSERT_EQ( n1 ^ static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 ^ static_cast< CFNumberRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 ^ static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 ^ static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 ^ static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 ^ static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorXorSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::SInt8 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::SInt8 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::SInt8 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::SInt16 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::SInt16 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::SInt16 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::SInt32 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::SInt32 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::SInt32 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::SInt64 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::SInt64 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::SInt64 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::UInt8 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::UInt8 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::UInt8 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::UInt16 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::UInt16 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::UInt16 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::UInt32 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::UInt32 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::UInt32 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorXorUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 ^ static_cast< CF::Number::UInt64 >( 43 ), 43 );
    ASSERT_EQ( n2 ^ static_cast< CF::Number::UInt64 >( 43 ),  1 );
    ASSERT_EQ( n3 ^ static_cast< CF::Number::UInt64 >( 43 ), 43 );
}

TEST( CFPP_Number, OperatorLeftShiftNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << CF::Number( 1 ),  0 );
    ASSERT_EQ( n2 << CF::Number( 1 ), 84 );
    ASSERT_EQ( n3 << CF::Number( 1 ),  0 );
    
    ASSERT_EQ( n1 << n3,  0 );
    ASSERT_EQ( n2 << n3, 42 );
    ASSERT_EQ( n3 << n3,  0 );
}

TEST( CFPP_Number, OperatorLeftShiftCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ), 84 );
    ASSERT_EQ( n3 << static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 << static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFTypeRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 << static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 << static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 << static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ), 84 );
    ASSERT_EQ( n3 << static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 << static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFNumberRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 << static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 << static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 << static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 << static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::SInt8 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::SInt8 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::SInt8 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::SInt16 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::SInt16 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::SInt16 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::SInt32 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::SInt32 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::SInt32 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::SInt64 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::SInt64 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::SInt64 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::UInt8 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::UInt8 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::UInt8 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::UInt16 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::UInt16 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::UInt16 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::UInt32 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::UInt32 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::UInt32 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorLeftShiftUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 << static_cast< CF::Number::UInt64 >( 1 ),  0 );
    ASSERT_EQ( n2 << static_cast< CF::Number::UInt64 >( 1 ), 84 );
    ASSERT_EQ( n3 << static_cast< CF::Number::UInt64 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> CF::Number( 1 ),  0 );
    ASSERT_EQ( n2 >> CF::Number( 1 ), 21 );
    ASSERT_EQ( n3 >> CF::Number( 1 ),  0 );
    
    ASSERT_EQ( n1 >> n3,  0 );
    ASSERT_EQ( n2 >> n3, 42 );
    ASSERT_EQ( n3 >> n3,  0 );
}

TEST( CFPP_Number, OperatorRightShiftCFType )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ), 21 );
    ASSERT_EQ( n3 >> static_cast< CFTypeRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 >> static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFTypeRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 >> static_cast< CFTypeRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 >> static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFTypeRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 >> static_cast< CFTypeRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftCFNumber )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ), 21 );
    ASSERT_EQ( n3 >> static_cast< CFNumberRef >( CF::Number( 1 ).GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 >> static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFNumberRef >( n3.GetCFObject() ), 42 );
    ASSERT_EQ( n3 >> static_cast< CFNumberRef >( n3.GetCFObject() ),  0 );
    
    ASSERT_EQ( n1 >> static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
    ASSERT_EQ( n2 >> static_cast< CFNumberRef >( CF::Array().GetCFObject() ), 42 );
    ASSERT_EQ( n3 >> static_cast< CFNumberRef >( CF::Array().GetCFObject() ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::SInt8 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::SInt8 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::SInt8 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::SInt16 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::SInt16 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::SInt16 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::SInt32 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::SInt32 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::SInt32 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::SInt64 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::SInt64 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::SInt64 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::UInt8 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::UInt8 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::UInt8 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::UInt16 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::UInt16 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::UInt16 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::UInt32 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::UInt32 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::UInt32 >( 1 ),  0 );
}

TEST( CFPP_Number, OperatorRightShiftUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( n1 >> static_cast< CF::Number::UInt64 >( 1 ),  0 );
    ASSERT_EQ( n2 >> static_cast< CF::Number::UInt64 >( 1 ), 21 );
    ASSERT_EQ( n3 >> static_cast< CF::Number::UInt64 >( 1 ),  0 );
}

TEST( CFPP_Number, CastToSInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::SInt8 >( n1 ), static_cast< CF::Number::SInt8 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt8 >( n2 ), static_cast< CF::Number::SInt8 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt8 >( n3 ), static_cast< CF::Number::SInt8 >(  0 ) );
}

TEST( CFPP_Number, CastToSInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::SInt16 >( n1 ), static_cast< CF::Number::SInt16 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt16 >( n2 ), static_cast< CF::Number::SInt16 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt16 >( n3 ), static_cast< CF::Number::SInt16 >(  0 ) );
}

TEST( CFPP_Number, CastToSInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::SInt32 >( n1 ), static_cast< CF::Number::SInt32 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt32 >( n2 ), static_cast< CF::Number::SInt32 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt32 >( n3 ), static_cast< CF::Number::SInt32 >(  0 ) );
}

TEST( CFPP_Number, CastToSInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::SInt64 >( n1 ), static_cast< CF::Number::SInt64 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt64 >( n2 ), static_cast< CF::Number::SInt64 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::SInt64 >( n3 ), static_cast< CF::Number::SInt64 >(  0 ) );
}

TEST( CFPP_Number, CastToUInt8 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::UInt8 >( n1 ), static_cast< CF::Number::UInt8 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt8 >( n2 ), static_cast< CF::Number::UInt8 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt8 >( n3 ), static_cast< CF::Number::UInt8 >(  0 ) );
}

TEST( CFPP_Number, CastToUInt16 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::UInt16 >( n1 ), static_cast< CF::Number::UInt16 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt16 >( n2 ), static_cast< CF::Number::UInt16 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt16 >( n3 ), static_cast< CF::Number::UInt16 >(  0 ) );
}

TEST( CFPP_Number, CastToUInt32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::UInt32 >( n1 ), static_cast< CF::Number::UInt32 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt32 >( n2 ), static_cast< CF::Number::UInt32 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt32 >( n3 ), static_cast< CF::Number::UInt32 >(  0 ) );
}

TEST( CFPP_Number, CastToUInt64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_EQ( static_cast< CF::Number::UInt64 >( n1 ), static_cast< CF::Number::UInt64 >(  0 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt64 >( n2 ), static_cast< CF::Number::UInt64 >( 42 ) );
    ASSERT_EQ( static_cast< CF::Number::UInt64 >( n3 ), static_cast< CF::Number::UInt64 >(  0 ) );
}

TEST( CFPP_Number, CastToFloat32 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float32 >( n1 ),  0 ) );
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float32 >( n2 ), 42 ) );
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float32 >( n3 ),  0 ) );
}

TEST( CFPP_Number, CastToFloat64 )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float64 >( n1 ),  0 ) );
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float64 >( n2 ), 42 ) );
    ASSERT_TRUE( FloatIsEqual( static_cast< CF::Number::Float64 >( n3 ),  0 ) );
}

TEST( CFPP_Number, GetTypeID )
{
    CF::Number n;
    
    ASSERT_EQ( n.GetTypeID(), CFNumberGetTypeID() );
}

TEST( CFPP_Number, GetCFObject )
{
    CF::Number n1;
    CF::Number n2( 42 );
    CF::Number n3( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_TRUE( n1.GetCFObject() != NULL );
    ASSERT_TRUE( n2.GetCFObject() != NULL );
    ASSERT_TRUE( n3.GetCFObject() == NULL );
    ASSERT_EQ( CFGetTypeID( n1.GetCFObject() ), CFNumberGetTypeID() );
    ASSERT_EQ( CFGetTypeID( n2.GetCFObject() ), CFNumberGetTypeID() );
}

TEST( CFPP_Number, IsFloatType )
{
    CF::Number n1;
    CF::Number n2( static_cast< CF::Number::UInt8 >( 42 ) );
    CF::Number n3( static_cast< CF::Number::Float32 >( 42 ) );
    CF::Number n4( static_cast< CFNumberRef >( NULL ) );
    
    ASSERT_FALSE( n1.IsFloatType() );
    ASSERT_FALSE( n2.IsFloatType() );
    ASSERT_TRUE(  n3.IsFloatType() );
    ASSERT_FALSE( n4.IsFloatType() );
}

TEST( CFPP_Number, GetSInt8Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetSInt8Value(), static_cast< CF::Number::SInt8 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetSInt8Value(), static_cast< CF::Number::SInt8 >( 0 ) );
}

TEST( CFPP_Number, GetSInt16Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetSInt16Value(), static_cast< CF::Number::SInt16 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetSInt16Value(), static_cast< CF::Number::SInt16 >( 0 ) );
}

TEST( CFPP_Number, GetSInt32Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetSInt32Value(), static_cast< CF::Number::SInt32 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetSInt32Value(), static_cast< CF::Number::SInt32 >( 0 ) );
}

TEST( CFPP_Number, GetSInt64Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetSInt64Value(), static_cast< CF::Number::SInt64 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetSInt64Value(), static_cast< CF::Number::SInt64 >( 0 ) );
}

TEST( CFPP_Number, GetUInt8Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetUInt8Value(), static_cast< CF::Number::UInt8 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetUInt8Value(), static_cast< CF::Number::UInt8 >( 0 ) );
}

TEST( CFPP_Number, GetUInt16Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetUInt16Value(), static_cast< CF::Number::UInt16 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetUInt16Value(), static_cast< CF::Number::UInt16 >( 0 ) );
}

TEST( CFPP_Number, GetUInt32Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetUInt32Value(), static_cast< CF::Number::UInt32 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetUInt32Value(), static_cast< CF::Number::UInt32 >( 0 ) );
}

TEST( CFPP_Number, GetUInt64Value )
{
    CF::Number n( 42 );
    
    ASSERT_EQ( n.GetUInt64Value(), static_cast< CF::Number::UInt64 >( 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_EQ( n.GetUInt64Value(), static_cast< CF::Number::UInt64 >( 0 ) );
}

TEST( CFPP_Number, GetFloat32Value )
{
    CF::Number n( 42 );
    
    ASSERT_TRUE( FloatIsEqual( n.GetFloat32Value(), 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_TRUE( FloatIsEqual( n.GetFloat32Value(), 0 ) );
}

TEST( CFPP_Number, GetFloat64Value )
{
    CF::Number n( 42 );
    
    ASSERT_TRUE( FloatIsEqual( n.GetFloat64Value(), 42 ) );
    
    n = static_cast< CFNumberRef >( NULL );
    
    ASSERT_FALSE( n.IsValid() );
    ASSERT_TRUE( FloatIsEqual( n.GetFloat64Value(), 0 ) );
}

TEST( CFPP_Number, SetSInt8Value )
{
    CF::Number n;
    
    n.SetSInt8Value( 42 );
    
    ASSERT_EQ( n.GetSInt8Value(), static_cast< CF::Number::SInt8 >( 42 ) );
}

TEST( CFPP_Number, SetSInt16Value )
{
    CF::Number n;
    
    n.SetSInt16Value( 42 );
    
    ASSERT_EQ( n.GetSInt16Value(), static_cast< CF::Number::SInt16 >( 42 ) );
}

TEST( CFPP_Number, SetSInt32Value )
{
    CF::Number n;
    
    n.SetSInt32Value( 42 );
    
    ASSERT_EQ( n.GetSInt32Value(), static_cast< CF::Number::SInt32 >( 42 ) );
}

TEST( CFPP_Number, SetSInt64Value )
{
    CF::Number n;
    
    n.SetSInt64Value( 42 );
    
    ASSERT_EQ( n.GetSInt64Value(), static_cast< CF::Number::SInt64 >( 42 ) );
}

TEST( CFPP_Number, SetUInt8Value )
{
    CF::Number n;
    
    n.SetUInt8Value( 42 );
    
    ASSERT_EQ( n.GetUInt8Value(), static_cast< CF::Number::UInt8 >( 42 ) );
}

TEST( CFPP_Number, SetUInt16Value )
{
    CF::Number n;
    
    n.SetUInt16Value( 42 );
    
    ASSERT_EQ( n.GetUInt16Value(), static_cast< CF::Number::UInt16 >( 42 ) );
}

TEST( CFPP_Number, SetUInt32Value )
{
    CF::Number n;
    
    n.SetUInt32Value( 42 );
    
    ASSERT_EQ( n.GetUInt32Value(), static_cast< CF::Number::UInt32 >( 42 ) );
}

TEST( CFPP_Number, SetUInt64Value )
{
    CF::Number n;
    
    n.SetUInt64Value( 42 );
    
    ASSERT_EQ( n.GetUInt64Value(), static_cast< CF::Number::UInt64 >( 42 ) );
}

TEST( CFPP_Number, SetFloat32Value )
{
    CF::Number n;
    
    n.SetFloat32Value( 42 );
    
    ASSERT_TRUE( FloatIsEqual( n.GetFloat32Value(), 42 ) );
}

TEST( CFPP_Number, SetFloat64Value )
{
    CF::Number n;
    
    n.SetFloat64Value( 42 );
    
    ASSERT_TRUE( FloatIsEqual( n.GetFloat64Value(), 42 ) );
}

TEST( CFPP_Number, Swap )
{
    CF::Number n1( 1 );
    CF::Number n2( 2 );
    
    swap( n1, n2 );
    
    ASSERT_EQ( n1, 2 );
    ASSERT_EQ( n2, 1 );
}
