/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*!
 * @file        Test-CFPP-NotificationCenter.cpp
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com / www.digidna.net
 * @abstract    Unit tests for CF::NotificationCenter
 */

#include <CF++.hpp>
#include <GoogleMock/GoogleMock.h>

using namespace testing;

typedef struct
{
    CFNotificationCenterRef center;
    void                  * observer;
    CFStringRef             name;
    const void            * object;
    CFDictionaryRef         userInfo;
}
NotificationCallbackArgs;

static NotificationCallbackArgs NotificationArgs  = { NULL, NULL, NULL, NULL, NULL };
static int                      NotificationCount = 0;

static void NotificationCallback( CFNotificationCenterRef center, void * observer, CFStringRef name, const void * object, CFDictionaryRef userInfo );
static void NotificationCallback( CFNotificationCenterRef center, void * observer, CFStringRef name, const void * object, CFDictionaryRef userInfo )
{
    NotificationArgs.center   = center;
    NotificationArgs.observer = observer;
    NotificationArgs.name     = name;
    NotificationArgs.object   = object;
    NotificationArgs.userInfo = userInfo;
    
    NotificationCount++;
}

TEST( CFPP_NotificationCenter, GetDarwinNotifyCenter )
{
    CF::NotificationCenter c;
    
    c = CF::NotificationCenter::GetDarwinNotifyCenter();
    
    ASSERT_TRUE( c.IsValid() );
    ASSERT_TRUE( c.GetCFObject() == CFNotificationCenterGetDarwinNotifyCenter() );
}

TEST( CFPP_NotificationCenter, GetDistributedCenter )
{
    CF::NotificationCenter c;
    
    c = CF::NotificationCenter::GetDistributedCenter();
    ASSERT_TRUE( c.GetCFObject() == CFNotificationCenterGetDistributedCenter() );
    
    ASSERT_TRUE( c.IsValid() );
}

TEST( CFPP_NotificationCenter, GetLocalCenter )
{
    CF::NotificationCenter c;
    
    c = CF::NotificationCenter::GetLocalCenter();
    ASSERT_TRUE( c.GetCFObject() == CFNotificationCenterGetLocalCenter() );
    
    ASSERT_TRUE( c.IsValid() );
}

TEST( CFPP_NotificationCenter, CTOR )
{
    CF::NotificationCenter c;
    
    ASSERT_FALSE( c.IsValid() );
}

TEST( CFPP_NotificationCenter, CCTOR )
{
    CF::NotificationCenter c1( CF::NotificationCenter::GetLocalCenter() );
    CF::NotificationCenter c2( static_cast< CFNotificationCenterRef >( NULL ) );
    CF::NotificationCenter c3( c1 );
    CF::NotificationCenter c4( c2 );
    
    ASSERT_TRUE(  c1.IsValid() );
    ASSERT_FALSE( c2.IsValid() );
    ASSERT_TRUE(  c3.IsValid() );
    ASSERT_FALSE( c4.IsValid() );
    
    ASSERT_TRUE( c1.GetCFObject() == c3.GetCFObject() );
    ASSERT_TRUE( c2.GetCFObject() == c4.GetCFObject() );
}

#ifdef CFPP_HAS_CPP11
TEST( CFPP_NotificationCenter, MCTOR )
{
    CF::NotificationCenter c1( CF::NotificationCenter::GetLocalCenter() );
    CF::NotificationCenter c2( static_cast< CFNotificationCenterRef >( NULL ) );
    CF::NotificationCenter c3( std::move( c1 ) );
    CF::NotificationCenter c4( std::move( c2 ) );
    
    ASSERT_FALSE( c1.IsValid() );
    ASSERT_FALSE( c2.IsValid() );
    ASSERT_TRUE(  c3.IsValid() );
    ASSERT_FALSE( c4.IsValid() );
    
    ASSERT_TRUE( c3.GetCFObject() == CFNotificationCenterGetLocalCenter() );
}
#endif

TEST( CFPP_NotificationCenter, CTOR_AutoPointer )
{
    CF::NotificationCenter c1( CF::AutoPointer( CFRetain( CFNotificationCenterGetLocalCenter() ) ) );
    CF::NotificationCenter c2( CF::AutoPointer( CFUUIDCreate( NULL ) ) );
    CF::NotificationCenter c3( CF::AutoPointer( NULL ) );
    
    ASSERT_TRUE(  c1.IsValid() );
    ASSERT_FALSE( c2.IsValid() );
    ASSERT_FALSE( c3.IsValid() );
}

TEST( CFPP_NotificationCenter, CTOR_CFType )
{
    CF::NotificationCenter c1( static_cast< CFTypeRef >( CFNotificationCenterGetLocalCenter() ) );
    CF::NotificationCenter c2( CF::Boolean().GetCFObject() );
    CF::NotificationCenter c3( static_cast< CFTypeRef >( NULL ) );
    
    ASSERT_TRUE(  c1.IsValid() );
    ASSERT_FALSE( c2.IsValid() );
    ASSERT_FALSE( c3.IsValid() );
}

TEST( CFPP_NotificationCenter, CTOR_CFNotificationCenter )
{
    CF::NotificationCenter c1( CFNotificationCenterGetLocalCenter() );
    CF::NotificationCenter c2( static_cast< CFNotificationCenterRef >( const_cast< void * >( CF::Boolean().GetCFObject() ) ) );
    CF::NotificationCenter c3( static_cast< CFNotificationCenterRef >( NULL ) );
    
    ASSERT_TRUE(  c1.IsValid() );
    ASSERT_FALSE( c2.IsValid() );
    ASSERT_FALSE( c3.IsValid() );
}

TEST( CFPP_NotificationCenter, CTOR_OperatorAssignNotificationCenter )
{
    CF::NotificationCenter c1( CF::NotificationCenter::GetLocalCenter() );
    CF::NotificationCenter c2( CF::NotificationCenter::GetDistributedCenter() );
    
    c2 = c1;
    
    ASSERT_TRUE( c2.IsValid() );
    ASSERT_TRUE( c2.GetCFObject() == c1.GetCFObject() );
}

TEST( CFPP_NotificationCenter, CTOR_OperatorAssignAutoPointer )
{
    CF::NotificationCenter c1;
    CF::NotificationCenter c2( CF::NotificationCenter::GetLocalCenter() );
    CF::NotificationCenter c3( CF::NotificationCenter::GetLocalCenter() );
    
    ASSERT_FALSE( c1.IsValid() );
    ASSERT_TRUE(  c2.IsValid() );
    ASSERT_TRUE(  c3.IsValid() );
    
    c1 = CF::AutoPointer( CFRetain( CFNotificationCenterGetLocalCenter() ) );
    c2 = CF::AutoPointer( CFUUIDCreate( NULL ) );
    c3 = CF::AutoPointer( NULL );
    
    ASSERT_TRUE(  c1.IsValid() );
    ASSERT_FALSE( c2.IsValid() );
    ASSERT_FALSE( c3.IsValid() );
}

TEST( CFPP_NotificationCenter, CTOR_OperatorAssignCFType )
{
    CF::NotificationCenter c1;
    CF::NotificationCenter c2( CF::NotificationCenter::GetLocalCenter() );
    CF::NotificationCenter c3( CF::NotificationCenter::GetLocalCenter() );
    
    ASSERT_FALSE( c1.IsValid() );
    ASSERT_TRUE(  c2.IsValid() );
    ASSERT_TRUE(  c3.IsValid() );
    
    c1 = static_cast< CFTypeRef >( CFNotificationCenterGetLocalCenter() );
    c2 = CF::Boolean().GetCFObject();
    c3 = static_cast< CFTypeRef >( NULL );
    
    ASSERT_TRUE(  c1.IsValid() );
    ASSERT_FALSE( c2.IsValid() );
    ASSERT_FALSE( c3.IsValid() );
}

TEST( CFPP_NotificationCenter, CTOR_OperatorAssignCFNotificationCenter )
{
    CF::NotificationCenter c1;
    CF::NotificationCenter c2( CF::NotificationCenter::GetLocalCenter() );
    CF::NotificationCenter c3( CF::NotificationCenter::GetLocalCenter() );
    
    ASSERT_FALSE( c1.IsValid() );
    ASSERT_TRUE(  c2.IsValid() );
    ASSERT_TRUE(  c3.IsValid() );
    
    c1 = CFNotificationCenterGetLocalCenter();
    c2 = static_cast< CFNotificationCenterRef >( const_cast< void * >( CF::Boolean().GetCFObject() ) );
    c3 = static_cast< CFNotificationCenterRef >( NULL );
    
    ASSERT_TRUE(  c1.IsValid() );
    ASSERT_FALSE( c2.IsValid() );
    ASSERT_FALSE( c3.IsValid() );
}

TEST( CFPP_NotificationCenter, GetTypeID )
{
    CF::NotificationCenter c( CF::NotificationCenter::GetLocalCenter() );
    
    ASSERT_EQ( c.GetTypeID(), CFNotificationCenterGetTypeID() );
}

TEST( CFPP_NotificationCenter, GetCFObject )
{
    CF::NotificationCenter c1( CF::NotificationCenter::GetLocalCenter() );
    CF::NotificationCenter c2;
    
    ASSERT_TRUE( c1.GetCFObject() != NULL );
    ASSERT_TRUE( c2.GetCFObject() == NULL );
    ASSERT_EQ( CFGetTypeID( c1.GetCFObject() ), CFNotificationCenterGetTypeID() );
}

TEST( CFPP_NotificationCenter, PostNotification )
{
    int                    observer( 0 );
    int                    object( 0 );
    CF::String             name( "test" );
    CF::Dictionary         info;
    CF::NotificationCenter c( CF::NotificationCenter::GetLocalCenter() );
    
    c.AddObserver
    (
        &observer,
        NotificationCallback,
        name,
        &object,
        CFNotificationSuspensionBehaviorDeliverImmediately
    );
    
    NotificationCount = 0;
    
    memset( &NotificationArgs, 0, sizeof( NotificationCallbackArgs ) );
    
    ASSERT_TRUE( NotificationArgs.center   == NULL );
    ASSERT_TRUE( NotificationArgs.observer == NULL );
    ASSERT_TRUE( NotificationArgs.name     == NULL );
    ASSERT_TRUE( NotificationArgs.object   == NULL );
    ASSERT_TRUE( NotificationArgs.userInfo == NULL );
    ASSERT_TRUE( NotificationCount         == 0 );
    
    c.PostNotification( "foo", NULL, NULL, true );
    
    ASSERT_TRUE( NotificationArgs.center   == NULL );
    ASSERT_TRUE( NotificationArgs.observer == NULL );
    ASSERT_TRUE( NotificationArgs.name     == NULL );
    ASSERT_TRUE( NotificationArgs.object   == NULL );
    ASSERT_TRUE( NotificationArgs.userInfo == NULL );
    ASSERT_TRUE( NotificationCount         == 0 );
    
    c.PostNotification( "test", &object, info, true );
    
    ASSERT_TRUE( NotificationArgs.center   == c.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.observer == &observer );
    ASSERT_TRUE( NotificationArgs.name     == name.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.object   == &object );
    ASSERT_TRUE( NotificationArgs.userInfo == info.GetCFObject() );
    ASSERT_TRUE( NotificationCount         == 1 );
    
    c.RemoveEveryObserver( &observer );
}

TEST( CFPP_NotificationCenter, PostNotificationWithOptions )
{
    int                    observer( 0 );
    int                    object( 0 );
    CF::String             name( "test" );
    CF::Dictionary         info;
    CF::NotificationCenter c( CF::NotificationCenter::GetLocalCenter() );
    
    c.AddObserver
    (
        &observer,
        NotificationCallback,
        name,
        &object,
        CFNotificationSuspensionBehaviorDeliverImmediately
    );
    
    NotificationCount = 0;
    
    memset( &NotificationArgs, 0, sizeof( NotificationCallbackArgs ) );
    
    ASSERT_TRUE( NotificationArgs.center   == NULL );
    ASSERT_TRUE( NotificationArgs.observer == NULL );
    ASSERT_TRUE( NotificationArgs.name     == NULL );
    ASSERT_TRUE( NotificationArgs.object   == NULL );
    ASSERT_TRUE( NotificationArgs.userInfo == NULL );
    ASSERT_TRUE( NotificationCount         == 0 );
    
    c.PostNotificationWithOptions( "foo", NULL, NULL, 0 );
    
    ASSERT_TRUE( NotificationArgs.center   == NULL );
    ASSERT_TRUE( NotificationArgs.observer == NULL );
    ASSERT_TRUE( NotificationArgs.name     == NULL );
    ASSERT_TRUE( NotificationArgs.object   == NULL );
    ASSERT_TRUE( NotificationArgs.userInfo == NULL );
    ASSERT_TRUE( NotificationCount         == 0 );
    
    c.PostNotificationWithOptions( "test", &object, info, kCFNotificationDeliverImmediately );
    
    ASSERT_TRUE( NotificationArgs.center   == c.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.observer == &observer );
    ASSERT_TRUE( NotificationArgs.name     == name.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.object   == &object );
    ASSERT_TRUE( NotificationArgs.userInfo == info.GetCFObject() );
    ASSERT_TRUE( NotificationCount         == 1 );
    
    c.RemoveEveryObserver( &observer );
}

TEST( CFPP_NotificationCenter, AddObserver )
{
    int                    observer( 0 );
    int                    object( 0 );
    CF::String             name( "test" );
    CF::Dictionary         info;
    CF::NotificationCenter c( CF::NotificationCenter::GetLocalCenter() );
    
    c.AddObserver
    (
        &observer,
        NotificationCallback,
        name,
        &object,
        CFNotificationSuspensionBehaviorDeliverImmediately
    );
    
    NotificationCount = 0;
    
    memset( &NotificationArgs, 0, sizeof( NotificationCallbackArgs ) );
    
    ASSERT_TRUE( NotificationArgs.center   == NULL );
    ASSERT_TRUE( NotificationArgs.observer == NULL );
    ASSERT_TRUE( NotificationArgs.name     == NULL );
    ASSERT_TRUE( NotificationArgs.object   == NULL );
    ASSERT_TRUE( NotificationArgs.userInfo == NULL );
    ASSERT_TRUE( NotificationCount         == 0 );
    
    c.PostNotification( "foo", NULL, NULL, true );
    
    ASSERT_TRUE( NotificationArgs.center   == NULL );
    ASSERT_TRUE( NotificationArgs.observer == NULL );
    ASSERT_TRUE( NotificationArgs.name     == NULL );
    ASSERT_TRUE( NotificationArgs.object   == NULL );
    ASSERT_TRUE( NotificationArgs.userInfo == NULL );
    ASSERT_TRUE( NotificationCount         == 0 );
    
    c.PostNotification( "test", &object, info, true );
    
    ASSERT_TRUE( NotificationArgs.center   == c.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.observer == &observer );
    ASSERT_TRUE( NotificationArgs.name     == name.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.object   == &object );
    ASSERT_TRUE( NotificationArgs.userInfo == info.GetCFObject() );
    ASSERT_TRUE( NotificationCount         == 1 );
    
    c.RemoveEveryObserver( &observer );
}

TEST( CFPP_NotificationCenter, RemoveEveryObserver )
{
    int                    observer( 0 );
    int                    object( 0 );
    CF::String             name( "test" );
    CF::Dictionary         info;
    CF::NotificationCenter c( CF::NotificationCenter::GetLocalCenter() );
    
    c.AddObserver
    (
        &observer,
        NotificationCallback,
        name,
        &object,
        CFNotificationSuspensionBehaviorDeliverImmediately
    );
    
    NotificationCount = 0;
    
    memset( &NotificationArgs, 0, sizeof( NotificationCallbackArgs ) );
    
    ASSERT_TRUE( NotificationArgs.center   == NULL );
    ASSERT_TRUE( NotificationArgs.observer == NULL );
    ASSERT_TRUE( NotificationArgs.name     == NULL );
    ASSERT_TRUE( NotificationArgs.object   == NULL );
    ASSERT_TRUE( NotificationArgs.userInfo == NULL );
    ASSERT_TRUE( NotificationCount         == 0 );
    
    c.PostNotification( "foo", NULL, NULL, true );
    
    ASSERT_TRUE( NotificationArgs.center   == NULL );
    ASSERT_TRUE( NotificationArgs.observer == NULL );
    ASSERT_TRUE( NotificationArgs.name     == NULL );
    ASSERT_TRUE( NotificationArgs.object   == NULL );
    ASSERT_TRUE( NotificationArgs.userInfo == NULL );
    ASSERT_TRUE( NotificationCount         == 0 );
    
    c.PostNotification( "test", &object, info, true );
    
    ASSERT_TRUE( NotificationArgs.center   == c.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.observer == &observer );
    ASSERT_TRUE( NotificationArgs.name     == name.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.object   == &object );
    ASSERT_TRUE( NotificationArgs.userInfo == info.GetCFObject() );
    ASSERT_TRUE( NotificationCount         == 1 );
    
    c.RemoveEveryObserver( &observer );
    c.PostNotification( "test", &object, info, true );
    
    ASSERT_TRUE( NotificationArgs.center   == c.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.observer == &observer );
    ASSERT_TRUE( NotificationArgs.name     == name.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.object   == &object );
    ASSERT_TRUE( NotificationArgs.userInfo == info.GetCFObject() );
    ASSERT_TRUE( NotificationCount         == 1 );
}

TEST( CFPP_NotificationCenter, RemoveObserver )
{
    int                    observer( 0 );
    int                    object( 0 );
    CF::String             name( "test" );
    CF::Dictionary         info;
    CF::NotificationCenter c( CF::NotificationCenter::GetLocalCenter() );
    
    c.AddObserver
    (
        &observer,
        NotificationCallback,
        name,
        &object,
        CFNotificationSuspensionBehaviorDeliverImmediately
    );
    
    NotificationCount = 0;
    
    memset( &NotificationArgs, 0, sizeof( NotificationCallbackArgs ) );
    
    ASSERT_TRUE( NotificationArgs.center   == NULL );
    ASSERT_TRUE( NotificationArgs.observer == NULL );
    ASSERT_TRUE( NotificationArgs.name     == NULL );
    ASSERT_TRUE( NotificationArgs.object   == NULL );
    ASSERT_TRUE( NotificationArgs.userInfo == NULL );
    ASSERT_TRUE( NotificationCount         == 0 );
    
    c.PostNotification( "foo", NULL, NULL, true );
    
    ASSERT_TRUE( NotificationArgs.center   == NULL );
    ASSERT_TRUE( NotificationArgs.observer == NULL );
    ASSERT_TRUE( NotificationArgs.name     == NULL );
    ASSERT_TRUE( NotificationArgs.object   == NULL );
    ASSERT_TRUE( NotificationArgs.userInfo == NULL );
    ASSERT_TRUE( NotificationCount         == 0 );
    
    c.PostNotification( "test", &object, info, true );
    
    ASSERT_TRUE( NotificationArgs.center   == c.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.observer == &observer );
    ASSERT_TRUE( NotificationArgs.name     == name.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.object   == &object );
    ASSERT_TRUE( NotificationArgs.userInfo == info.GetCFObject() );
    ASSERT_TRUE( NotificationCount         == 1 );
    
    c.RemoveObserver( &observer, name, &object );
    c.PostNotification( "test", &object, info, true );
    
    ASSERT_TRUE( NotificationArgs.center   == c.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.observer == &observer );
    ASSERT_TRUE( NotificationArgs.name     == name.GetCFObject() );
    ASSERT_TRUE( NotificationArgs.object   == &object );
    ASSERT_TRUE( NotificationArgs.userInfo == info.GetCFObject() );
    ASSERT_TRUE( NotificationCount         == 1 );
}

TEST( CFPP_NotificationCenter, Swap )
{
    CF::NotificationCenter c1( CF::NotificationCenter::GetLocalCenter() );
    CF::NotificationCenter c2( CF::NotificationCenter::GetDistributedCenter() );
    
    ASSERT_TRUE( c1.IsValid() );
    ASSERT_TRUE( c2.IsValid() );
    
    ASSERT_TRUE( c1.GetCFObject() == CFNotificationCenterGetLocalCenter() );
    ASSERT_TRUE( c2.GetCFObject() == CFNotificationCenterGetDistributedCenter() );
    
    swap( c1, c2 );
    
    ASSERT_TRUE( c1.IsValid() );
    ASSERT_TRUE( c2.IsValid() );
    
    ASSERT_TRUE( c1.GetCFObject() == CFNotificationCenterGetDistributedCenter() );
    ASSERT_TRUE( c2.GetCFObject() == CFNotificationCenterGetLocalCenter() );
}
